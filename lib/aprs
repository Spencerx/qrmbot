#!/usr/bin/perl -w
#
# APRS Query using aprs.fi
#
# 2-clause BSD license.
# Copyright (c) 2018, 2019, 2020 molo1134@github. All rights reserved.

# requires an API key from aprs.fi.  Place into the file $HOME/.aprs.fi as follows:
#
# $apikey = "12345.xxxxxxxxxxxxxxxx";

use strict;
use utf8;
use POSIX qw(floor strftime);
use Math::Round;
binmode STDOUT, ":utf8";

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Location;
use Util;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  if ($username eq getEggdropUID()) {
    print "usage: !aprs <callsign or object>\n";
  } else {
    print "usage: $0 <callsign or object>\n";
  }
  exit $exitnonzeroonerror;
}

our $apikey = undef;
my $apikeyfile = $ENV{'HOME'} . "/.aprs.fi";
if (-e ($apikeyfile)) {
  require($apikeyfile);
} else {
  die "error: unable to read file $apikeyfile"
}
die "error: no API key set" unless defined($apikey);

my $useragent = "molo1134Query/0.0.2 (+http://reddit.com/r/amateurradio/w/qrmbot)";

my $highlight = "vt100";
$highlight = "none" if ! -t STDOUT;
$highlight = "irc" if $username eq getEggdropUID();

#my $targetcall = "N2WNU-5";
my $targetcall = $ARGV[0];
# only allow alphanumeric and "." and "-"
$targetcall =~ s/[^A-Za-z0-9.-]//g;

my $url = "https://api.aprs.fi/api/get?name=${targetcall}&what=loc&apikey=${apikey}&format=json";

#print "$url\n";

my %vals;

getvals($url, \%vals);

#foreach my $key (keys(%vals)) {
#  print "$key = $vals{$key}\n";
#}

if (defined $vals{found} and $vals{found} != 1) {
  print "not found: $targetcall\n";
  exit $exitnonzeroonerror;
}

# aprs.fi doesn't always correctly flag type=w for aprs stations that report
# weather periodically but not always.  So this is unreliable.  So always check
# to see if there is WX data from the station.
# Note: this makes a second request when we don't always need one.  This is an
# API limitation, as wx and loc requests cannot be combined.
#
#if ($vals{type} eq "w") {
  # get weather fields
  $url = "https://api.aprs.fi/api/get?name=${targetcall}&what=wx&apikey=${apikey}&format=json";
  getvals($url, \%vals);

  $vals{temp_c} = round($vals{temp}) if defined $vals{temp};
  $vals{temp_f} = round($vals{temp} * 1.8 + 32) if defined $vals{temp};
  $vals{wind_calm} = 1 if (defined($vals{wind_speed}) and $vals{wind_speed} == 0);
  $vals{wind_speed_kph} = round($vals{wind_speed} * 3.6) if defined($vals{wind_speed});
  $vals{wind_speed_mph} = round($vals{wind_speed} * 2.2369363) if defined($vals{wind_speed});
  $vals{wind_gust_kph} = round($vals{wind_gust} * 3.6) if defined($vals{wind_gust});
  $vals{wind_gust_mph} = round($vals{wind_gust} * 2.2369363) if defined($vals{wind_gust});

  $vals{rain_1h_inch} = nearest(0.01, ($vals{rain_1h} * 0.039370079)) if defined $vals{rain_1h};
  $vals{rain_24h_inch} = nearest(0.01, ($vals{rain_24h} * 0.039370079)) if defined $vals{rain_24h};
  $vals{rain_midnight_inch} = nearest(0.01, ($vals{rain_mn} * 0.039370079)) if defined $vals{rain_mn};

  $vals{wind_dir} = azToNEWS($vals{wind_direction}) if defined $vals{wind_direction};
  $vals{pressure_inhg} = nearest(0.01, ($vals{pressure} * 0.029529983)) if defined $vals{pressure};
#}

print bold($vals{name});
if (defined $vals{srccall} and $vals{name} ne $vals{srccall}) {
  print " (de $vals{srccall})";
}
print " (WX)" if $vals{type} eq "w";
if (defined $vals{lat} and defined $vals{lng}) {
  print ": " . (geolocate($vals{lat}, $vals{lng}) || coordToGrid($vals{lat}, $vals{lng}));
}

# wx station vals
print "  Temp: " . bold("$vals{temp_c}°C/$vals{temp_f}°F") if defined ($vals{temp});
print "  Humidity: $vals{humidity}%" if defined ($vals{humidity});

my $winddir = $vals{wind_dir} || "?";

if (defined($vals{wind_calm}) and $vals{wind_calm} == 1) {
    print "  Wind: $winddir calm";
    #print " $vals{wind_direction}°" if defined ($vals{wind_direction});
} elsif (defined $vals{wind_speed}) {
  print "  Wind: $winddir at $vals{wind_speed_kph}kph/$vals{wind_speed_mph}mph";
}
print " (gust $vals{wind_gust_kph}kph/$vals{wind_gust_mph}mph)" if defined ($vals{wind_gust}) && $vals{wind_gust} > 0;
print "  Pressure: $vals{pressure}mb/$vals{pressure_inhg}inHg" if defined ($vals{pressure});
print "  Precipitation:"
	if ((defined$vals{rain_1h} and $vals{rain_1h} > 0) ||
	  (defined$vals{rain_24h} and $vals{rain_24h} > 0) ||
	  (defined$vals{rain_mn} and $vals{rain_mn} > 0));
print " last hour: $vals{rain_1h}mm/$vals{rain_1h_inch}in"
	if defined$vals{rain_1h} and $vals{rain_1h} > 0;
print " last 24h: $vals{rain_24h}mm/$vals{rain_24h_inch}in"
	if defined$vals{rain_24h} and $vals{rain_24h} > 0;
print " today: $vals{rain_mn}mm/$vals{rain_midnight_inch}in"
	if defined$vals{rain_mn} and $vals{rain_mn} > 0;


print " " if $vals{type} eq "w";
# unused fields:
#   rain_1h - Rainfall over past 1 hour, in millimeters
#   rain_24h - Rainfall over past 24 hours, in mm
#   rain_mn - Rainfall since midnight, in mm
#   luminosity - Luminosity, watts / square meter (W/m^2)

if (defined($vals{speed})) {
  my $kph = floor($vals{speed});
  my $mph = floor($vals{speed} * 0.62137119);
  print " @ ${kph}kph/${mph}mph";

  if ($vals{speed} > 0.0) {
    printf " %0.1f°", $vals{heading}  if defined($vals{heading});
    printf " %0.1f°", $vals{course} if defined($vals{course});
  }
}

if (defined($vals{altitude})) {
  my $alt_m = floor($vals{altitude});
  my $alt_ft = floor($alt_m * 3.2808399);
  print " alt ${alt_m}m/${alt_ft}ft";
}

my $ts = undef;
if ($vals{type} eq "w" and defined $vals{"time"}) {
  $ts = $vals{"time"};
} elsif (defined $vals{lasttime}) {
  $ts = $vals{lasttime};
}

print " at " . strftime("%Y-%m-%d %H:%Mz", gmtime($ts)) if defined($ts);

if (defined($vals{comment})) {
  $vals{comment} =~ s/\\\//\//g;
  print " ($vals{comment})";
}
print " via ($vals{path})" if defined($vals{path});
print "\n";

exit 0;

#phg = 2533
#result = ok
#symbol = S#

sub getvals {
  my $url = shift;
  my $valref = shift;

  #print "$url\n";
  open(HTTP, '-|', "curl --max-time 10 -k -L -A \"$useragent\" -s '$url'");
  binmode(HTTP, ":utf8");
  while (<HTTP>) {
    # "found":1,"entries":[{"class":"a"
    s/:(\d+),/:$1 , /g;
    s/","/" , "/g;
    s/(\d),"/$1 , "/g;
    s/{"/{\n"/g;
    #print;
    my @fields = split / , /;
    foreach my $field (@fields) {
      if ($field =~ /"?([^"]+)"?\s*:\s*"?([^"]+)"?,?/) {
	my $key = $1;
	my $val = $2;
	$val =~ s/,$//;
	$$valref{$key} = $val;
	#print "$key = $val\n";
      }
    }
  }
  close (HTTP);

  return $valref;
}

