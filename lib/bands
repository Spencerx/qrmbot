#!/usr/bin/perl -w
# Report band conditions.

# 2-clause BSD license.
# Copyright (c) 2018, 2020, 2022 molo1134@github. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;

use Math::Round;
use JSON qw( decode_json );

my ($updated, $aindex, $kindex, $rawkindex, $solarflux, $sunspots);
my @bands;
my @phenom;

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my $quick = 0;
my $i = 0;
while ($i <= $#ARGV) {
  $quick = 1 if $ARGV[$i] eq "-q";

  if (lc($ARGV[$i]) eq "about" and not $quick) {
    print "via hamqsl.com; eSSN and eSFI via prop.kc2g.com\n";
    exit 0;
  }

  if (lc($ARGV[$i]) eq "about" and $quick) {
    print "Kp and Ap via gfz-potsdam.de; SFI via NOAA; SSN via sidc.be; eSSN and eSFI via prop.kc2g.com\n";
    exit 0;
  }
  $i++;
}


my ($esfi, $essn);
{
  my $url = "http://beta.kc2g.com/api/essn.json";
  open (HTTP, '-|', "curl --max-time 10 -s -k -L $url");

  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $json = <HTTP>;
  my $j = decode_json($json) if not ($json =~ /^<!DOCTYPE/i or $json =~ /^\s*$/);
  close(HTTP);

  if (defined $j) {
    my $num = scalar @{$j->{'24h'}};
    $esfi = nearest(0.1, $j->{'24h'}->[$num-1]->{'sfi'});
    $essn = nearest(0.1, $j->{'24h'}->[$num-1]->{'ssn'});
  }
}

if ($quick) {
  my $url = "https://www-app3.gfz-potsdam.de/kp_index/Kp_ap_nowcast.txt";
  open (HTTP, '-|', "curl --max-time 15 -s -k -L $url");
  while (<HTTP>) {
    chomp;
    next if m/^#/;
    my @vals = split(/\s+/, $_);
    next if $vals[7] == -1.000 or $vals[8] == -1;
    #print "$vals[7] $vals[8]\n";
    $aindex = $vals[8];
    $rawkindex = $vals[7];
    $kindex = int($vals[7]) if $vals[7] =~ /\.000/;
    $kindex = int($vals[7]) . "⅓" if $vals[7] =~ /\.333/;
    $kindex = int($vals[7]) . "⅔" if $vals[7] =~ /\.667/;
  }
}

if ($quick) {
  my $url = "https://services.swpc.noaa.gov/products/summary/10cm-flux.json";
  open (JSON, '-|', "curl --max-time 15 -s -k -L $url | tail -1 ");
  $_ = <JSON>;
  $solarflux = $1 if m/"Flux":"(\d+)"/;
  close(JSON);

  # attempt #2
  if (not defined $solarflux or $solarflux == 0) {
    # this is slow, ~1MB of data and we only want the last row
    my $url = "https://lasp.colorado.edu/lisird/latis/dap/penticton_radio_flux.csv";
    open (CSV, '-|', "curl --max-time 25 -s -k -L $url | tail -1 ");
    $_ = <CSV>;
    chomp;
    (undef, undef, $solarflux) = split /,/;
    close(CSV);
  }
}

if ($quick) {
  my $url = "https://www.sidc.be/silso/DATA/EISN/EISN_current.txt";
  open (TXT, '-|', "curl --max-time 15 -s -k -L $url | tail -1 ");
  $_ = <TXT>;
  (undef, undef, undef, undef, $sunspots) = split /\s+/;
  close(TXT);
}

if (not $quick) {
  my $url = "http://www.hamqsl.com/solarxml.php";
  open (HTTP, '-|', "curl --max-time 10 -s -k -L $url");
  while (<HTTP>) {
    chomp;
    if (/Warning/) {
      print "error in source data";
      exit 0;
    }
    if (/<updated>\s*([^<]+)<\/updated>/) {
      $updated = $1;
    }
    if (/<aindex>\s*([^<]+)<\/aindex>/) {
      $aindex = $1;
    }
    if (/<kindex>\s*([^<]+)<\/kindex>/) {
      $kindex = $1;
      $rawkindex = $kindex;
    }
    if (/<solarflux>\s*([^<]+)<\/solarflux>/) {
      $solarflux = $1;
    }
    if (/<sunspots>\s*([^<]+)<\/sunspots>/) {
      $sunspots = $1;
    }
    if (/<band name="([^"]*)" time="([^"]*)".*>([^<]*)<.*$/) {
      push(@bands, join(',', $1,$2,$3));
    }
    if (/<phenomenon name="([^"]*)" location="([^"]*)".*>([^<]*)<.*$/) {
      push(@phenom, join(',', $1,$2,$3));
    }
  }
  close(HTTP);
}

if ($rawkindex > 4.5) {
  s/Poor/Shit/ for @bands;
}

$solarflux = colorSfi($solarflux);
$aindex = colorAIndex($aindex);
$kindex = colorKIndex($kindex, $rawkindex);

if ($quick) {
  print "Conditions: SFI=$solarflux SN=$sunspots A=$aindex K=$kindex";
  print " eSFI=" . colorSfi($esfi) ." eSSN=$essn" if defined $esfi;
  print "\n";
  exit 0;
}

print "Bands as of $updated: SFI=$solarflux SN=$sunspots A=$aindex K=$kindex";
print " eSFI=" . colorSfi($esfi) ." eSSN=$essn" if defined $esfi;
print "\n";

@bands = sort { $a cmp $b } @bands;

foreach my $band (@bands) {
  my ($b, $t, $c) = split(/,/, $band);
  $c = colorCondx($c);
  print "| $b | $t: $c " if $t eq "day";
  print "| $t: $c |\n" if $t eq "night";
}

foreach my $p (@phenom) {
  #print "$p\n";
  my ($n, $l, $c) = split(/,/, $p);
  print " $n: $l $c;" if ! $c =~ /Closed/i;
}
#print "\n";

sub colorCondx {
  $_ = shift;
  $_ = red($_) if $_ eq "Poor" or $_ eq "Shit";
  $_ = yellow($_) if $_ eq "Fair";
  $_ = green($_) if $_ eq "Good";
  return $_;
}


sub colorSfi {
  # linear scale from 75 to 235, with 16 steps
  $_ = shift;
  my $minscale = 75;
  my $maxscale = 235;
  my $steps = 16;

  my $rescale = $_ - $minscale;
  my $index;
  if ($_ < $minscale) {
    $index = 0;
  } else {
    $index = int($rescale / (($maxscale-$minscale)/$steps));
  }

  if ($index < 1) {
    $_ = darkRed($_);
  } elsif ($index < 3) {
    $_ = red($_);
  } elsif ($index < 5) {
    $_ = darkYellow($_);
  } elsif ($index < 7) {
    $_ = yellow($_);
  } elsif ($index < 9) {
    $_ = green($_);
  } elsif ($index < 11) {
    $_ = lightgreen($_);
  } elsif ($index < 13) {
    $_ = lightblue($_);
  } elsif ($index < 15) {
    $_ = cyan($_);
  } elsif ($index < 16) {
    $_ = lightcyan($_);
  } else {
    $_ = magenta($_);
  }

  return $_;
}

#   colors from: http://www.swpc.noaa.gov/products/station-k-and-indices
# Kindex < 4: green
# Kindex = 5: yellow
# Kindex 6-7: red
# Kindex > 7: light blue
sub colorKIndex {
  $_ = shift;
  my $raw = shift;
  if ($raw < 4) {
    $_ = green($_);
  } elsif ($raw < 5) {
    $_ = yellow($_);
  } elsif ($raw < 8) {
    $_ = red($_);
  } else {
    $_ = lightblue($_);
    print "error: ionosphere on fire\n";
  }
  return $_;
}

#   colors from: http://www.swpc.noaa.gov/products/station-k-and-indices
# Aindex  < 20: green
# Aindex 20-29: yellow
# Aindex 30-49: red
# Aindex 50-99: dark red
# Aindex > 100: light blue
sub colorAIndex {
  $_ = shift;
  if ($_ < 20) {
    $_ = green($_);
  } elsif ($_ < 30) {
    $_ = yellow($_);
  } elsif ($_ < 50) {
    $_ = red($_);
  } elsif ($_ < 100) {
    $_ = darkRed($_);
  } else {
    $_ = lightblue($_);
  }
  return $_;
}
