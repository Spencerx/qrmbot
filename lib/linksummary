#!/usr/bin/perl
# Create a description of a link.
#
# 2-clause BSD license.
# Copyright (c) 2018, 2019, 2020, 2021, 2022 molo1134@github. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Util;

use URI::Escape;
use Encode qw(/decode/);
use Time::Local;
use Time::Piece ();
use List::Util qw[min max];
use POSIX qw(strftime);
use JSON qw( decode_json from_json );
use Math::Round;

our $imgur_key=undef;
my $imgurfile = $ENV{'HOME'} . "/.imgurkey";
if (-e ($imgurfile)) {
  require($imgurfile);
}

my $timeout = 4;	# max 4 seconds

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);
my $highlight="vt220";
$highlight = "none" if ! -t STDOUT;
$highlight = "irc" if $username eq getEggdropUID();

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));
@ARGV = uniq(@ARGV);	# deduplicate - no reason to process the same url twice

my $i = 0;
while ($i <= $#ARGV) {

  $ARGV[$i] =~ s/'//g; # sanitize
  our $deamped = 0;

  if ($ARGV[$i] =~ m|^https?://[^/]*?/amp/|i or $ARGV[$i] =~ m|\.ampproject\.org/|i or $ARGV[$i] =~ m|://amp\.|i) {
    my $deamped = deamp($ARGV[$i]);
    if (defined ($deamped)) {
      print "⚡", yellow("DeAmped"), ": ";
      $ARGV[$i] = $deamped;
      $deamped = 1;
    }
  }

  if ($ARGV[$i] =~ m|^https?://(www\.\|m\.\|music\.)?youtube\.com/watch\?.*\bv=([\w-]+)|i) {
    printYouTubeMetaData($2);
  } elsif ($ARGV[$i] =~ m|^https?://youtu\.be/([\w-]+)|i) {
    printYouTubeMetaData($1);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?youtube.com/(shorts\|live)/([\w-]+)|i) {
    printYouTubeMetaData($3);
  } elsif ($ARGV[$i] =~ m|^https?://t\.co/\w+|i or
	  $ARGV[$i] =~ m|^https?://(mobile\.)?twitter\.com/|i or
	  $ARGV[$i] =~ m|^https?://x\.com/|i or
	  $ARGV[$i] =~ m|^https?://nitter\.|i) {
    doTwitter($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?imdb\.com/title/tt\d+|i or
	  $ARGV[$i] =~ m|^https?://imdb\.to/\w+|i) {
    doImdb($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(\w+)\.wikipedia\.org/wiki/([^/\s]+)|i) {
    doWiki($1, $2);
  } elsif ($ARGV[$i] =~ m|^https?://((www\|old\|np\|new)\.)?reddit\.com/r/\w+/s/\w+/?|i) {
    doRedditShare($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://((www\|old\|np\|new)\.)?reddit\.com/(r/\w+/)?comments/\w+/?|i or
	  $ARGV[$i] =~ m|^https?://redd\.it/\w+|i) {
    doReddit($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://swap\.qth\.com/view_ad\.php\?counter=\d+|i) {
    doQthCom($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?qrz\.com/(db\|lookup)/[A-Z0-9]+|i) {
    doQrzDb($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.\|smile\.)?amazon\.(com\|co\.jp\|ca\|co\.uk\|de)/(.*/)?dp/\w+/?|i) {
    doAmazon($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://a.co/\w+/?|i) {
    doAmazon($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.\|smile\.)?amazon\.(com\|co\.jp\|ca\|co\.uk\|de)/gp/product/\w+/?|i) {
    doAmazon($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?xkcd.com/(\d+)/?$|) {
    doXkcd($2);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?google.com/maps/.*@([0-9.-]+),([0-9.-]+)|i) {
    doQth($2,$3);
  } elsif ($ARGV[$i] =~ m|^https?://goo\.gl/maps/|i or
	  $ARGV[$i] =~ m|^https?://(www\.)?google\.com/maps/|i) {
    # noop
  } elsif ($ARGV[$i] =~ m|^https?://(\w+\.)?imgur\.(com\|io)/|) {
    doImgur($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://wireless2\.fcc\.gov/UlsApp/ApplicationSearch/.*\?applID=|) {
    doFccApp($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?ae7q\.com/query/list/GenLicAvail.php\?REGION=([0-9]+)|) {
    doAe7qRegion($2);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?ae7q\.com/query/data/CallHistory\.php\?CALL=([A-Z0-9]+)|) {
    doAe7qCall($2);
  } elsif ($ARGV[$i] =~ m|^https?://.*zoom\.us/j/[0-9]+|) {
    # noop
  } elsif ($ARGV[$i] =~ m|^https?://(.*?)(/web)?/@[a-z0-9_.-]+(@[a-z0-9_.-]+)?/[0-9]+|i) {
    doMastodon($ARGV[$i]);
    # falls back to doHtml if the API check fails
  } elsif ($ARGV[$i] =~ m|https?://(www\.)?instagram\.com/|) {
    my $url = $ARGV[$i];
    $url =~ s/(www\.)?instagram\.com/imginn.com/;
    print "$url -- ";
    doHtml($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://| and
	  not $ARGV[$i] =~ /\.(bmp|tif|gif|jpe?g|jpe|png|mp[34]|pdf|docx?|xlsx?|exe|dll|msi|wav|wma|flac|shn|7z|zip|deb|rpm|rar|tgz|tar|dmg|iso|apk|jar|avi|m4v|mov|mpe?g|vob|swf|wmv|gz|xz|bz2)/i) {
    # TODO: HTTP HEAD for these file types ^^ -- get size and last modified date
    doHtml($ARGV[$i]);
  }

  $i++;
}

sub printYouTubeMetaData {
  my $id = shift;
  my $url = "https://youtube.com/watch?v=$id";
  my $shortcut = "http://youtu.be/$id";
  my $vidimg = "https://i.ytimg.com/vi/$id/hqdefault.jpg";
  #my $vidimg = "https://i.ytimg.com/vi/$id/maxresdefault.jpg";
  my $done = 0;
  my ($title, $len, $desc, $count, $pubdate, $genre, $nsfw, $unlisted, $paid, $author, $likes, $dislikes, $live);
  open(HTTP, '-|', "curl -4 --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (/Our systems have detected unusual traffic from your computer network./) {
      print;
      exit 0;
    }
    if (/This video is no longer available/) {
      s/^\s*//; s/\s*$//;
      print;
      print "\n";
      exit 0;
    }
    if (/<meta.*?></) {
      s/></>\n</g;
      my @lines = split /\n/;
      foreach my $l (@lines) {
	if ($l =~ /<meta\s+(itemprop|property|name)="([^"]+)"\s+content="([^"]*)">/) {
	  my ($k, $v) = ($2, $3);
	  $v = decodeEntities($v);
	  #print "$k = $v\n";
	  $title = $v if $k eq "twitter:title";
	  $title = $v if $k eq "title";
	  $title = $v if $k eq "name";
	  #$len   = $v if $k eq "duration";
	  $desc  = $v if $k eq "description";
	  $desc  = $v if $k eq "twitter:description";
	  $count = $v if $k eq "interactionCount";
	  $pubdate = $v if $k eq "datePublished";
	  $genre = $v if $k eq "genre";
	  $nsfw = $v eq "False" ? 1 : 0 if $k eq "isFamilyFriendly";
	  $unlisted = $v eq "True" ? 1 : 0 if $k eq "unlisted";
	  $paid = $v eq "True" ? 1 : 0 if $k eq "paid";

	  if ($k eq "duration") {
	    # ISO 8601 duration; youtube only actually uses minutes and seconds?
	    #print "duration: $v\n";
	    $len = 0;
	    if ($v =~ m/P((\d+)Y)?((\d+)M)?((\d+)D)?T((\d+)H)?((\d+)M)?((\d+)S)?/) {
	      my ($y, $mo, $d, $h, $m, $s) = ($2, $4, $6, $8, $10, $12);
	      $len += ($y * 60 * 60 * 24 * 365) if length $y > 0;
	      $len += ($mo * 60 * 60 * 24 * 30) if length $mo > 0;
	      $len += ($d * 60 * 60 * 24)       if length $d > 0;
	      $len += ($h * 60 * 60)            if length $h > 0;
	      $len += ($m * 60)                 if length $m > 0;
	      $len += $s                        if length $s > 0;
	    }
	  }
	}
      }
    }
    if (not defined $nsfw and /"isUnlisted\\?":(true|.*?),/) {
      $unlisted = ($1 eq "true" ? 1 : 0);
    }
    if (not defined $nsfw and /"isFamilySafe\\?":(true|.*?),/) {
      $nsfw = ($1 eq "true" ? 0 : 1);
    }
    if (not defined $count and /"viewCount\\?":\\?"([^"]+)\\?"/) {
      $count = $1;
    }
    if (not defined $pubdate and /"publishDate\\?":\\?"([^"]+)\\?"/) {
      $pubdate = $1;
    }
    if (/"author\\?":\\?"([^"]+)\\?"/) {
      $author = $1;
    }
    if (not defined $len and /dur=(\d+)/) {
      #$len = $1;
    }
    if (not defined $len and /dur%3D(\d+)/) {
      #$len = $1;
    }
    if (not defined $len and /approxDurationMs":"(\d+)"/) {
      #$len = int($1 / 1000);
    }
    if (/([0-9,]+) watching now/i) {
      my $t = $1;
      $t =~ s/,//g;
      $count = $t if $t > 2;
    }
#    if (/"shortDescription":"([^"]+)"/) {
#      $desc = $1;
#    }
    if (/"like this video along with ([0-9,]+) other people"/) {
      $likes = $1;
      $likes =~ s/,//g;
    }
    if (/"dislike this video along with ([0-9,]+) other people"/) {
      $dislikes = $1;
      $dislikes =~ s/,//g;
    }
    if (/"isLiveNow\\?":true/) {
      $live = 1;
    }
  }
  close(HTTP);

  $desc = "(no description)" if $desc =~ /^\s*$/;
  if (length $desc > 100) {
    $desc = substr($desc, 0, 100) . "…";
  }

  use integer;
  my $h = $len / 3600;
  my $m = ($len - (($len / 3600) * 3600)) / 60;
  my $s = $len - (($len / 60) * 60);

  print bold("\"$title\""), " by $author on $pubdate; ";
  print "${h}h" if $h > 0;
  print "${m}m" if $m > 0;
  print "${s}s;" if $s > 0;
  print red("[LIVE]") if $live == 1;
  print " $count views" if not defined $live or $live != 1;
  print " $count watching" if $live == 1;
  print green(" ${likes}↑") if defined $likes;
  print red(" ${dislikes}↓") if defined $dislikes;
#  print " ($genre)" if defined $genre;
  print red(" [NSFW]") if $nsfw == 1;
  print green(" [PAID]") if $paid == 1;
  print yellow(" [UNLISTED]") if $unlisted == 1;
#  print ": $desc $shortcut img: $vidimg\n";
  print ": $desc img: $vidimg\n";
}


sub doTwitter {
  my $url = shift;
  my $id = undef;
  my $username = undef;
  my $origUsername = undef;
  my $directRT = 0;

  if ($url =~ /https?:\/\/t\.co\/\w+/) {
    open (HTTP, '-|', "curl --max-time $timeout -L -k -s -o /dev/null -w \"%{url_effective}\" '$url'");
    while(<HTTP>) {
      $url = $_;
    }
    close(HTTP);
  }
  #  'curl --max-time $timeout -Ls -o /dev/null -w "%{url_effective}" "https://t.co/aoVVgKEfqC"'

  if ($url =~ /https?:\/\/(mobile\.)?(x\.com|twitter\.com|nitter\..*?)\/(\w+)\/status(es)?\/(\d+)/) {
    $username = $3;
    $id = $5;
  }

  if (not defined $id or not defined $username) {
    return;
  }

  my $alturl = undef;
  $alturl = "https://nitter.katia.sh/$username/status/$id" if $url =~ /(twitter|x)\.com/;
  $alturl = "https://twitter.com/$username/status/$id" if $url =~ /nitter/;

  $url = "https://nitter.katia.sh/$username/status/$id";
  my $ua = "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0";
  #print "$url\n";

  my $headers = "-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate, br' -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Cookie: hlsPlayback=on' -H 'Upgrade-Insecure-Requests: 1' -H 'Sec-Fetch-Dest: document' -H 'Sec-Fetch-Mode: navigate' -H 'Sec-Fetch-Site: none' -H 'Sec-Fetch-User: ?1' -H 'Pragma: no-cache' -H 'Cache-Control: no-cache'";

  $timeout = 20;

  my $in_main_tweet = 0;

  my $fullname = undef;
  my $username = undef;
  my $verified = 0;
  my $datestr = undef;
  my $date = undef;
  my $text = undef;
  my $multiline_text = 0;
  my $retweet_count = undef;
  my $favorite_count = undef;
  my $reply_count = undef;
  my @links;
  # XXX TODO below here:
  my ($media, $tco, $rt) = undef;

  open (HTTP, '-|', "curl --max-time $timeout -A '$ua' $headers -L -k -s --compressed '$url'");
  binmode(HTTP, ":utf8");
  while (<HTTP>) {
    $in_main_tweet = 1 if not $in_main_tweet and /<div .*?class="main-tweet">/;
    $in_main_tweet = 0 if $in_main_tweet and /class=".*?after-tweet.*?"/;
    next if not $in_main_tweet;
    if (not defined $fullname and m|<a class="fullname" .*?>(.*?)<|) {
      $fullname = $1;
    }
    $verified = 1 if /title="Verified account"/;
    if (not defined $username and m|<a class="username" .*?>@(.*?)<|) {
      $username = $1;
    }
    if (not defined $datestr and m|<span class="tweet-date".*?title="(.*?)"|) {
      $datestr = $1;
    }
    if (not defined $text and m|<div class="tweet-content.*?>(.*?)</div>|) {
      $text = $1;
    }
    if (not defined $text and m|<div class="tweet-content.*?>(.*?)$|) {
      $text = $1;
      $multiline_text = 1;
    } elsif ($multiline_text) {
      $text .= $_;
      $multiline_text = 0 if m|</div>$|;
      $text =~ s|</div>||;
    }
    if (not defined $reply_count and m|<span class="tweet-stat">.*<span class="icon-comment".*?></span> ([0-9,]+)<|) {
      $reply_count = $1;
      $reply_count =~ s/,//g;
    }
    if (not defined $retweet_count and m|<span class="tweet-stat">.*<span class="icon-retweet".*?></span> ([0-9,]+)<|) {
      $retweet_count = $1;
      $retweet_count =~ s/,//g;
    }
    if (m|<span class="tweet-stat">.*<span class="icon-quote".*?></span> ([0-9,]+)<|) {
      my $quote_count = $1;
      $quote_count =~ s/,//g;
      $retweet_count += $quote_count if defined $retweet_count;
      $retweet_count = $quote_count if not defined $retweet_count;
    }
    if (not defined $favorite_count and m|<span class="tweet-stat">.*<span class="icon-heart".*?></span> ([0-9,]+)<|) {
      $favorite_count = $1;
      $favorite_count =~ s/,//g;
    }
  }
  close(HTTP);

  if (defined $datestr) {
    # "Nov 16, 2023 · 7:17 PM UTC"
    $datestr =~ s/[,·]//g;
    $datestr =~ s/  / /g;
    #print "$datestr\n";
    my ($mon, $d, $y, $h, $m, $ampm) = split /[: ]/, $datestr;
    $h += 12 if $ampm eq "PM";
    my $time = timegm(0, $m, $h, $d, monthNameToNum($mon) - 1, $y);
    $date = scalar(gmtime($time)) . " UTC";
    #print "$date\n";
  }


  # 223   147   93     “     LEFT DOUBLE QUOTATION MARK
  # 224   148   94     ”     RIGHT DOUBLE QUOTATION MARK
  # ❝ ❞
  # ☑ ✓ ✔ ✅

  if (not defined $text) {
    print "not found\n";
    #exit 0;
    return;
  }

  while ($text =~ m|<a[^>]*href=["']([^"']*?)["']\s*.*?>|i) {
    push @links, $1;
    $text =~ s|<a[^>]*href=.*?>(.*?)<\s*/a\s*>|$1|i;
  }

  for(my $i = 0; $i <= $#links; $i++) {
    #print "$i: $links[$i]\n";
    $links[$i] = shortenUrl($links[$i]);
    #print "$i: $links[$i]\n";
  }

  #print "TEXT: $text\n";
  #print "LINKS: ", join(" ", @links), "\n";
  #print "MEDIA: $media\n";
  #print "TCO: $tco\n";

  my $verifiedText = "";
  $verifiedText = lightblue("✔") if $verified == 1;
  $text =~ s/^\s*$//g;
  $text =~ s/\n\s*\n/\n/g;
  #$text =~ s/\n/\n  ❝/g;
  $text =~ s/(\S)\n(\S)/$1 $2/g;
  $text =~ s/\n//g;
  print "\@${origUsername} RT:" if defined $origUsername and $directRT = 1;
  print "\"$text\" ";
  print " ", join(" ", @links), " " if $#links >= 0;
  print "$media " if defined $media;
  print "RT: $tco " if defined $rt and defined $tco;
  print "$tco " if defined $tco and not defined $media and not defined $rt;
  print "— \@$username ($fullname)$verifiedText, $date";
  print " (↩ ", toHumanReadableNum($reply_count), "; ↺ ", toHumanReadableNum($retweet_count), "; ♡ ", toHumanReadableNum($favorite_count), ")";
  print " alt: ", shortenUrl($alturl) if defined $alturl;
  print "\n";

  # FIXME dangerous recursion
  if (defined $rt) {
    #print "$0 $rt\n";
    system "$0 $rt";
    #exit 0;
  }

}

sub toHumanReadableNum {
  my $val = shift;
  return $val if not isNumeric($val);
  return $val if $val < 1000;
  return nearest(0.1, ($val/1000)) . "k" if $val < 1000000;
  return nearest(0.1, ($val/1000000)) . "M" if $val < 1000000000;
  return nearest(0.1, ($val/1000000000)) . "B";
}

sub doMastodon {
  my $url = shift;
  my $statusid = undef;
  my $instance_base = undef;
  my $userid = undef;

  if ($url =~ m|^(.*?)/(web/)?@([a-z0-9_.-]+)(@[a-z0-9_.-]+)?/([0-9]+)(\?.*)?$|i) {
    ($instance_base, $userid, $statusid) = ($1, $3, $5);
  }
  #print "statusid: $statusid\n";
  #print "instance_base: $instance_base\n";
  #print "userid: $userid\n";
  if (not defined $statusid) {
    # does not seem to be a mastodon URL
    return doHtml($url);
  }

  INSTANCE_CHECK:
  my $instanceapi = "${instance_base}/api/v1/instance";
  open(JSON, '-|', "curl --max-time $timeout -L -k -s '$instanceapi' ");
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $uri = <JSON>;
  close(JSON);
  if (length $uri == 0 or not $uri =~ /^\s*{/s) {
    # does not seem to be a mastodon URL
    if ($instance_base =~ m|/web/?$|i) {
      # sometimes advertises /web when we want /api
      $instance_base =~ s|/web/?$|/|i;
      goto INSTANCE_CHECK;
    }
    return doHtml($url);
  }
  $uri =~ s/^.*?"uri":\s*"([^"]*)".*?$/$1/si;
  $uri =~ s/[\n\r]//sg;

  my $apiurl = "${instance_base}/api/v1/statuses/$statusid";
  open(JSON, '-|', "curl --max-time $timeout -L -k -s '$apiurl'");
  binmode(JSON, ":utf8");
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $json = <JSON>;
  close(JSON);
  my $j = from_json($json);

  if (defined $j->{error}) {
    print "error: $j->{error}\n";
    return;
  }

  my $origUsername = undef;

  if (defined $j->{reblog}) {
    $origUsername = "@" . $j->{account}->{username} . "@" . $uri;
    $j = $j->{reblog};
  }

  my $username = "@" . $j->{account}->{username} . "@" . $uri;
  my $fullname = $j->{account}->{display_name};
  $fullname = undef if defined $fullname and length($fullname) == 0;

  my $text = strip_html($j->{content});
  $text =~ s/^\s*$//g;
  $text =~ s/\n\s*\n/\n/sg;
  $text =~ s/\n/ /sg;
  $text =~ s/(\S)\n(\S)/$1 $2/sg;
  $text =~ s/\n/ /sg;

  my $datestr = $j->{created_at};
  my $date = undef;
  if (defined $datestr) {
    # "created_at": "2022-05-10T22:48:10.240Z"
    my ($y, $mon, $d, $h, $m, $s, undef) = split /[-T:.Z]/, $datestr;
    my $time = timegm($s, $m, $h, $d, $mon - 1, $y);
    $date = scalar(gmtime($time)) . " UTC";
  }

  my @mediaTypes;
  my @mediaUrls;
  my @mediaAttachments;
  if (defined $j->{media_attachments}) {
    for (my $i = 0; $i < scalar @{$j->{media_attachments}}; $i++) {
      $mediaTypes[$i] = $j->{media_attachments}->[$i]->{type};
      $mediaUrls[$i] = shortenUrl($j->{media_attachments}->[$i]->{url});
      my $char = chr(0x2460 + $i); # 0x2460 = ①
      $mediaAttachments[$i] = "$char $mediaTypes[$i]: $mediaUrls[$i]";
    }
  }

  my $reblog_count = $j->{reblogs_count};
  my $favorite_count = $j->{favourites_count};
  my $reply_count = $j->{replies_count};

  print "$origUsername reblogged: " if defined $origUsername;
  print "\"$text\" ";
  if (@mediaAttachments and scalar @mediaAttachments > 0) {
    for (my $i = 0; $i < scalar @mediaAttachments; $i++) {
      print $mediaAttachments[$i], " ";
    }
  }
  print "— $username";
  print " ($fullname)" if defined $fullname;
  print ", $date";
  print " (↩ ", toHumanReadableNum($reply_count), "; ↺ ", toHumanReadableNum($reblog_count), "; ★ ", toHumanReadableNum($favorite_count), ")";
  print "\n";
}



sub doImdb {
  my $url = shift;
  my ($title, $desc, $rating, $ratings);
  open (HTTP, '-|', "curl --max-time $timeout -A foo -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (/<meta property="og:title" content="([^"]*)"/) {
      $title = $1;
      $title =~ s/ - IMDb.*$//;
    }
    if (/<meta name="description" content="([^"]*)"/) {
      $desc = $1;
      if (length $desc > 300) {
	$desc = substr($desc, 0, 300) . "…";
      }
    }
    if (/hero-rating-bar__aggregate-rating__score.*?><.*?>([0-9.]+)<.*sc-e457ee34-3.*?>(.*?)</) {
      ($rating, $ratings) = ($1, $2);
    }
  }
  close(HTTP);

  return if !defined($title);

  print bold("\"$title\"");
  print " $rating", yellow("★"), " ($ratings ratings)" if defined $rating;
  print " — $desc" if defined $desc;
  print "\n";
}

sub doWiki {
  my $lang = shift;
  my $article = shift;
  my ($desc, $title);
  my $url = "https://$lang.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles=$article";
  #print "$url\n";
  open (HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (/"title":"([^"]*)"/) {
      $title = $1;
      $title =~ s/\\u([0-9a-f]{4})/chr(hex($1))/egi;
      $title =~ s/\\"/"/g;
      $title =~ s/\\n/ /g;
    }
    if (/"extract":"(.*)"/) {
      $desc = $1;
      $desc =~ s/\\u([0-9a-f]{4})/chr(hex($1))/egi;
      $desc =~ s/\\"/"/g;
      $desc =~ s/\\n/ /g;
      if (length $desc > 300) {
	$desc = substr($desc, 0, 300) . "…";
      }
    }
  }
  close(HTTP);
  if (defined($title) and defined($desc)) {
    my $shortUrl = shortenUrl("https://$lang.wikipedia.org/wiki/$article");
    print bold("\"$title\" ");
    print "$shortUrl " if defined $shortUrl and length($shortUrl) > 0;
    print "— $desc\n";
  }
}

sub doHtml {
  my $url = shift;
  my ($title, $desc, $charset, $contenttype, $httpcode, $shortUrl, $decoded);
  $decoded = 0;
  # -D - => output headers
  # -f => fail to have no output for 404
  # -L => follow 302
  # -k => insecure -- don't care about certs
  # -s => silent
  # -A => user agent
  # -H Accept => should cut down on images and the like, but check headers
  # -H Accept-Language => try to get english first
  #print "curl --compressed --max-time $timeout -D - -f -L -k -s -H \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9\" '$url'";
  my $useragent = "Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0";
  #print("curl --compressed --max-time $timeout -D - -f -L -k -s -H \"Accept: text/html,application/xhtml+xml,application/xml;q=1.9\" -A \"$useragent\" '$url'");
  open (HTTP, '-|', "curl --compressed --max-time $timeout -D - -f -L -k -s -H \"Accept: text/html,application/xhtml+xml,application/xml;q=1.9\" -H \"Accept-Language: en-us, en;q=0.9, *;q=0.8\" -A \"$useragent\" '$url'");
  while (<HTTP>) {
    #print;
    chomp;
    if (/^HTTP\/[0-9.]+\s*(\d+).*?$/) {
      $httpcode = $1;
      #print "$httpcode\n";
    }
    # want to ignore content-type if getting a 302 redirect
    if (defined($httpcode) and $httpcode < 300 and /^Content-Type:\s+(.*?)$/i) {
      $contenttype = $1;
      #print "$contenttype\n";
      if (not $contenttype =~ /^(text\/html)|(application\/(xhtml|xml))/) {
	close(HTTP);
	return;
      }
      if ($contenttype =~ /charset=(.*)/i) {
	if ($1 =~ /UTF-?8/i) {
	  binmode(HTTP, ":utf8");
	  $charset = "utf8";
	  $decoded = 1;
	}
      }
      last;
    }
  }
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $origpage = <HTTP>;
  my $page;
  close(HTTP);

  if (not defined($charset) and
      $origpage =~ /^.*<meta\s+http-equiv="Content-Type"\s+content=".*?charset=([^"]+)"/mi) {
    $charset = $1;
  }
  if (not defined($charset) and
      $origpage =~ /^.*<meta\s+charset="([^"]+)"/mi) {
    $charset = $1;
  }

  if (defined($charset) and not $decoded) {
    $page = decode($charset, $origpage);
  } else {
    $page = $origpage;
  }

  if (defined($page) and not utf8::valid($page)) {
    # failed utf8
    print "Error: Invalid UTF-8 sequence(s)\n";
    exit 0;
  }
  if (not defined($page)) {
    $page = $origpage;
  }

  #print "charset: $charset\n";
  #print "is utf8? ", (utf8::is_utf8($page)), "\n";
  #print "valid utf8? ", (utf8::valid($page)), "\n";

  if ($page =~ /<title.*?>\s*([^<]+?)\s*<\/title>/im) {
    $title = $1;
  }
  if ($page =~ /<meta\s+property="og:title"\s+content="([^"]+)"/im) {
    $title = $1;
  }
  if ($page =~ /<meta\s+content="([^"]+)"\s+property="og:title"/im) {
    $title = $1;
  }
  if ($page =~ /<meta\s+name="dcterms.title"\s+content="([^"]+)"/im) {
    $title = $1;
  }
  if (not defined($desc) and
	  $page =~ /<meta\s+name="description"\s+content="([^"]+)"/im) {
    $desc = $1;
  }
  if (not defined($desc) and
	  $page =~ /<meta\s+content="([^"]+)"\s+name="description"/im) {
    $desc = $1;
  }
  if ($page =~ /<meta\s+.*?property="og:description"\s+content="([^"]+)"/im) {
    $desc = $1;
  }
  if ($page =~ /<meta\s+content="([^"]+)"\s+property="og:description"/im) {
    $desc = $1;
  }
  if ($page =~ /<meta\s+name="DC.Description.Abstract"\s+content="([^"]+)"/im) {
    $desc = $1;
  }
  if (defined $title) {
    $title =~ s/[\x00-\x09\x0B-\x1F]//g;
    $title =~ s/\n/ /g;
    $title =~ s/\s\s+/ /g;
  }
  if (defined $desc) {
    $desc =~ s/[\x00-\x09\x0B-\x1F]//g;
    $desc =~ s/\n/ /g;
    $desc =~ s/\s\s+/ /g;
  }
  if ($page =~ /<link\s+rel="shortlink"\s+href="([^"]+)"/im) {
    $shortUrl = $1;
    # relative shortlinks
    if ($shortUrl =~ m|^//|) {
      my $tmp = $url;
      $tmp =~ s|://.*$|:|;
      $tmp .= $shortUrl;
      $shortUrl = $tmp;
    } elsif ($shortUrl =~ m|^/|) {
      my $tmp = $url;
      $tmp =~ s|://([^/]+)/.*$|://$1|;
      $tmp .= $shortUrl;
      $shortUrl = $tmp;
    }
  }

  #print "title: $title\n";
  #print "desc: $desc\n";

  our $deamped;
  $shortUrl = shortenUrl($url)
	if not defined($shortUrl) or length($shortUrl) > 50 or $deamped == 1;

  return if not defined($title) and not defined($desc) and not defined($shortUrl);

  if (defined($desc) and length($desc) > 300) {
    $desc = substr($desc, 0, 300) . "…";
  }

  $title = decodeEntities($title) if defined($title);
  $desc = decodeEntities($desc) if defined($desc);
  $title =~ tr/\n\r/  / if defined($title);
  $desc =~ tr/\n\r/  / if defined($desc);

  print bold("\"$title\"") if defined ($title);
  print " $shortUrl" if defined($shortUrl) and length($shortUrl) > 0;
  print " — $desc" if defined ($desc);
  print "\n";
}

sub doRedditShare {
  my $url = shift;
  $url =~ s|^https://reddit.com/|https://www.reddit.com/|;

  my $ua = "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0";

  open(REDIR, '-|', "curl --max-time $timeout -A '$ua' -ski '$url' | grep -i ^location:");

  binmode(REDIR, ":utf8");
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $location = <REDIR>;
  close(REDIR);
  
  $location =~ s/^location:\s*//i;
  $location =~ s/share_id=\w+//ig;
  $location =~ s/utm_\w+=[^&]+//ig;
  $location =~ s/&&+/&/g;
  $location =~ s/&$//g;

  if (not defined $location or $location eq "") {
    print "error: unable to resolve $url\n";
  } else {
    doReddit($location);
  }
}

sub doReddit {
  my $url = shift;

  my ($id, $title, $shortCommentUrl);

  # example url for particular comment: https://www.reddit.com/r/dayton/comments/5bntme/what_neighborhoods_in_dayton_would_you_tell/d9w9euj/

  my $jsonurl;
  my $commentId;

  if ($url =~ m|https?://((www\|old\|np\|new)\.)?reddit\.com/(r/\w+/comments/)?(\w+)/([^/]+/\w+/)?|i) {
    $id = $4;
    $commentId = $5 if defined $5;
    $shortCommentUrl = shortenUrl($url) if defined($5);
    $jsonurl = $url;
    $jsonurl =~ s/context=\d+//;
    $jsonurl =~ s/(\?.*)?$/.json$1/;
    $jsonurl =~ s|https?://((www\|old\|np\|new)\.)?reddit\.com/|https://old.reddit.com/|;
  } elsif ($url =~ /https?:\/\/redd\.it\/(\w+)/) {
    $id = $1;
    $jsonurl = "https://old.reddit.com/comments/$id/.json";
  } else {
    print ("unexpected url: $url\n");
    return;
  }

  #print "$jsonurl\n";
  my $ua = "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0";
  open(HTTP, '-|', "curl --max-time $timeout -A '$ua' -L -k -s '$jsonurl'");
  binmode(HTTP, ":utf8");
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $json = <HTTP>;
  close(HTTP);
  my $j = decode_json($json);

  my $post = $j->[0]->{data}->{children}->[0]->{data};
  my $comment = $j->[1]->{data}->{children}->[0]->{data};

  my $sub = $post->{subreddit};
  my $title = $post->{title};
  my $p_score = $post->{score};
  my $p_ratio = $post->{upvote_ratio};
  my $p_gilds = $post->{gilded};
  my $p_awards = $post->{total_awards_received};
  my $p_created = $post->{created};
  my $p_edited = $post->{edited};
  my $p_author = $post->{author};
  my $nsfw = $post->{over_18};
  my $spoiler = $post->{spoiler};
  my $numComments = $post->{num_comments};
  my $link = $post->{url};
  my $domain = $post->{domain};
  my $selftext = $post->{selftext};
  $selftext =~ s/[\r\n]/ /g;
  $selftext =~ s/\s\s+/ /g;
  $selftext =~ s/^\s+//;
  $selftext = undef if $selftext eq "";

  my $c_score = $comment->{score};
  my $c_author = $comment->{author};
  my $c_gilds = $comment->{gilded};
  my $c_awards = $comment->{total_awards_received};
  my $c_created = $comment->{created};
  my $c_edited = $comment->{edited};
  my $body = $comment->{body};
  $body =~ s/[\r\n]/ /g;
  $body =~ s/\s\s+/ /g;
  $body =~ s/^\s+//;

  if (not defined($commentId)) {

    my $author = "/u/$p_author";
    $author = green($author) if $post->{distinguished} eq "moderator";
    $author = red($author) if $post->{distinguished} eq "admin";
    $author = red("[deleted]") if $p_author eq "[deleted]";

    $title = green($title) if $post->{stickied};
    $title = bold($title) if not $post->{stickied};
    print bold('"'), $title, bold('"'), " by $author (";
    print green("${p_score}↑") if defined $p_score and $p_score > 0;
    print red("${p_score}↓") if defined $p_score and $p_score <= 0;
    print " ", round($p_ratio * 100.0), "%";
    print(" ", $p_gilds, yellow("★")) if defined $p_gilds and $p_gilds > 0;
    print(" ", $p_awards - $p_gilds, lightGrey("★")) if defined $p_awards and $p_awards > 0 and $p_awards > $p_gilds;
    print " ", red("[NSFW]") if defined $nsfw and $nsfw;
    print " ", yellow("[SPOILER]") if defined $spoiler and $spoiler;
    print " ", yellow("🔒") if $post->{locked};
    print " ", grey("🗄️") if $post->{archived};
    print ")";
    print " at ", strftime("%Y-%m-%d %H:%Mz", gmtime($p_created));
    print " (edited ", strftime("%Y-%m-%d %H:%Mz", gmtime($p_edited)), ")" if defined $p_edited and $p_edited > 0;
    print " http://redd.it/$id" if defined($id);
    if (not $post->{is_self} and not $post->{is_reddit_media_domain} and not $link =~ m/reddit.com/) {
      if ($link =~ m|^/r/[a-z0-9_-]+/(comments/)?([a-z0-9_-]+)/?|i) { # crosspost
	my $shortLink = "http://redd.it/$2";
	print " $shortLink ($domain)";
      } else {
	my $shortLink = shortenUrl($link);
	print " ", (defined($shortLink) ? $shortLink : $link), " ($domain)";
      }
    } elsif ($post->{is_self} or defined($selftext)) {
      print " | \"", substr($selftext, 0, 160);
      print "…" if length($selftext) > 160;
      print '"';
    }

  } else {

    if (not defined $c_author) {
      print "comment not found in \"$title\": $shortCommentUrl";
    } else {

      my $author = "/u/$c_author";
      $author = lightblue($author) if $c_author eq $p_author;
      $author = green("/u/$c_author") if $comment->{distinguished} eq "moderator";
      $author = red("/u/$c_author") if $comment->{distinguished} eq "admin";
      $author = red("[deleted]") if $c_author eq "[deleted]";
      print "comment by $author (";
      print green("${c_score}↑") if defined $c_score and $c_score > 0;
      print red("${c_score}↓") if defined $c_score and $c_score <= 0;
      print(" ", $c_gilds, yellow("★")) if defined $c_gilds and $c_gilds > 0;
      print(" ", $c_awards - $c_gilds, lightGrey("★")) if defined $c_awards and $c_awards > 0 and $c_awards > $c_gilds;
      print ")";
      print " at ", strftime("%Y-%m-%d %H:%Mz", gmtime($c_created));
      print " (edited ", strftime("%Y-%m-%d %H:%Mz", gmtime($c_edited)), ")" if defined $c_edited and $c_edited > 0;
      print " in \"$title\"";
      print " ", red("[NSFW]") if defined $nsfw and $nsfw;
      print " ", yellow("[SPOILER]") if defined $spoiler and $spoiler;
      print " ", yellow("🔒") if $post->{locked};
      print " ", grey("🗄️") if $post->{archived};
      print ": $shortCommentUrl";
      print " | ";
      print yellow("🔒 ") if $comment->{locked};
      print "\"", substr($body, 0, 160);
      print "…" if length($body) > 160;
      print '"';

    }
  }

  print "\n";
}

sub doQthCom {
  my $url = shift;
  my ($title, $desc, $call);

  # Temporary proxy - TODO: permanent URL?
  $url =~ s|https?://swap\.qth\.com/view_ad\.php\?counter=|https://www.k2cr.com/phpproxy/qth-proxy.php?id=|i;

  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (m|<font size=3 face="Arial,Helvetica">\s*(.*?)\s*</font></B>|) {
      $title = $1;
    }
    if (not defined($desc) and
	m|<DT><font size=2 face="Arial,Helvetica">\s*(.*)</font>|) {
      $desc = $1;
      $desc =~ s/<BR>/ /ig;
    }
    if (not defined($call) and m|<DT><font size=2 face="Arial,Helvetica">Listing #\d+ by <a href="https://www\.qth\.com/callsign\.php\?cs=[^"]+">([^<]+)</a>|) {
      $call = $1;
    }
  }
  close(HTTP);

  if (defined($desc) and length($desc) > 300) {
    $desc = substr($desc, 0, 300) . "…";
  }
  $title =~ tr/\n\r/  /;
  $desc =~ tr/\n\r/  /;
  $title = decodeEntities($title);
  $desc = decodeEntities($desc);
  $title =~ s/^\s*(.*?)\s*$/$1/;
  $desc =~ s/^\s*(.*?)\s*$/$1/;

  print bold("\"$title\"") if defined($title);
  print " by $call" if defined($call);
  print " — $desc" if defined($desc);
  print "\n";
}

sub doQrzDb {
  my $url = shift;
  my $call;
  if ($url =~ m|https?://(www\.)?qrz\.com/(db\|lookup)/([A-Z0-9/]+)|i) {
    $call = $3;
  }
  my $libdir = dirname(realpath(__FILE__));
  if (not defined($call) or not -e "$libdir/qrz") {
    doHtml($url);	# fallback
  }

  exec "$libdir/qrz", "--compact", "$call" or die "error execing qrz for $call";
}

sub doQth {
  my ($lat, $lon) = $@;
  my $libdir = dirname(realpath(__FILE__));
  if (-e "$libdir/grid") {
    exec "$libdir/grid", "$2,$3" or die "error execing grid for $2,$3";
  }
}

sub doAmazon {
  my $url = shift;
  my $shortUrl = shortenUrl($url);
  my $useragent = 'Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0';
  #my $useragent = "foo";
  my ($price, $curr, $stars, $prime, $vendor, $fulfilled, $title);
  my $lastbuyboxlabel = undef;
  my $coreprice = 0;
  open(HTTP, '-|', "curl -A \"$useragent\" --compressed --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    #print;
    #$pricespan = 1 if /span id="price_inside_buybox"/;
    #if ($pricespan == 1 and /\$([0-9.]+)\s*$/) {
    #}
    if (/Sorry, we just need to make sure you're not a robot./) {
      print "Captcha encountered; $shortUrl\n";
      return;
    }
    if (/discuss automated access/) {
      #print "Amazon anti-scraper filter encountered; $shortUrl\n";
      print "$shortUrl\n";
      return;
    }
    if (/Something Went Wrong/i) {
      print "Something went wrong; $shortUrl\n";
      return;
    }

    if (not defined $title and /<title>(Amazon.com\s*:|Amazon\s*\|)?\s*([^<]*?)(-?\s*Amazon.com|-?\s*Amazon Canada)?<\/title>/) {
      $title = decodeEntities($2);
      $title =~ s/: Amazon.co.uk:.*$//;
      $title =~ s/: Amazon.ca:.*$//;
      $title =~ s/:\s*Amazon.de:.*$//;
      $title =~ s/- Amazon.com.*$//;
    }
    if (/<meta name="title" content="(.*?)"/) {
      $title = decodeEntities($1);
      $title =~ s/: Amazon.co.uk:.*$//;
      $title =~ s/: Amazon.ca:.*$//;
      $title =~ s/:\s*Amazon.de:.*$//;
      $title =~ s/- Amazon.com.*$//;
    }
    if (/<span id="priceblock_ourprice"[^>]+>([0-9.,]+)\s*€</) {
      $price = $1;
      $curr = "€";
    }
    if (/<span id="priceblock_(ourprice|pospromoprice)"[^>]+>([\$￥£]|CDN\$)\s*([0-9.,]+)</) {
      $curr = $2;
      $curr =~ tr/￥/¥/;
      $price = $3;
    }
    if (/<span id="priceblock_ourprice"[^>]+>([\$￥£]|CDN\$)\s*([0-9.,]+) - ([\$￥£]|CDN\$)\s*([0-9.,]+)</) {
      $curr = $1;
      $curr =~ tr/￥/¥/;
      $price = "$2 to $1$4";
    }
    $coreprice = 1 if /<div id="corePrice_feature_div"/ or /data-feature-name="corePrice"/;
    if ($coreprice and /data-a-color="price">(<span.*?>)?([\$￥£]|CDN\$)\s*([0-9.,]+)\s*</) {
      $curr = $2;
      $curr =~ tr/￥/¥/;
      $price = $3;
      $coreprice = 0;
    }
    if ($coreprice and /data-a-color="price">(<span.*?>)?\s*([0-9.,]+)€\s*</) {
      $price = $2;
      $curr = '€';
      $coreprice = 0;
    }
    if (not defined $price and /span class=.*offer-price.*">([\$￥£]|CDN\$)\s*([0-9.,]+)</) {
      $curr = $1;
      $curr =~ tr/￥/¥/;
      $price = $2;
    }
    if (not defined $price and /\d New.*span class=.*a-color-price.*>\s*([\$￥£]|CDN\$)\s*([0-9.,]+)\s*</) {
      $curr = $1;
      $curr =~ tr/￥/¥/;
      $price = $2;
    }
    if (not defined $price and not /Used/ and /span class=.*a-color-price.*>\s*([\$￥£]|CDN\$)\s*([0-9.,]+)\s*</) {
      $curr = $1;
      $curr =~ tr/￥/¥/;
      $price = $2;
    }
    if (/"([0-9.]+) out of 5 stars"/ and not defined $stars) {
      $stars = $1;
    }
    if (/"([0-9,]+) von 5 Sternen"/ and not defined $stars) {
      $stars = $1;
    }
    if (/"5つ星のうち\s*([0-9.]+)"/ and not defined $stars) {
      $stars = $1;
    }
    $prime = 1 if /a-icon-prime.*aria-label="Free Shipping for Prime Members"/;
    $prime = 1 if /shipped by Amazon or get <b>Fast, Free Shipping<\/b> with/;
    #if (/(Sold by |この商品は、)<[^>]+>([^<]+)</) {
    #  $vendor = $2;
    #  print "setting vendor 3: $vendor\n";
    #}
    if (/(Ships|Dispatches) from and sold by <[^>]+>([^<]+)</) {
      $vendor = $1;
      $fulfilled = 0;
    }
    if (/<span>Verkauf und Versand durch <\/span><a class="a-link-normal" href="[^"]*"><span>([^<]+)<\/span><\/a>/) {
      $vendor = $1;
      $fulfilled = 0;
    }
    $fulfilled = 1 if /isAmazonFulfilled=1/;
    $fulfilled = 1 if /Fulfilled by Amazon/;
    #($vendor, $fulfilled) = ("Amazon", 1) if /(Ships|Dispatched) from and sold by Amazon/;
    ($vendor, $fulfilled) = ("Amazon", 1) if /data-feature-name="shipsFromSoldByInsideBuyBox"/;

    $lastbuyboxlabel = "ships" if /buybox-label" tabular-attribute-name="Ships from"/;
    $lastbuyboxlabel = "ships" if /buybox-label" tabular-attribute-name="Dispatches from"/;
    $lastbuyboxlabel = "ships" if /buybox-label" tabular-attribute-name="出荷元"/;
    $lastbuyboxlabel = "sold" if /buybox-label" tabular-attribute-name="Sold by"/;
    $lastbuyboxlabel = "sold" if /buybox-label" tabular-attribute-name="販売元"/;

    if ($lastbuyboxlabel eq "sold" and m/<span class="a-size-small">.*?Amazon.*?<\/span>\s*<\/div>/) {
      $vendor = "Amazon";
      $lastbuyboxlabel = undef;
    } elsif ($lastbuyboxlabel eq "sold" and m/<a.*?id='sellerProfileTriggerId'>(.*?)<\/a><\/span>/) {
      $vendor = $1;
      $lastbuyboxlabel = undef;
    }
    if ($lastbuyboxlabel eq "ships" and m/<span class="a-size-small">.*?Amazon.*?<\/span>\s*<\/div>/) {
      $fulfilled = 1;
      $lastbuyboxlabel = undef;
    }
  }
  close(HTTP);

  $prime = 0 if !defined $prime;
  $fulfilled = 0 if !defined $fulfilled;
  my $shortUrl = shortenUrl($url);

#  print "title: $title\n";
#  print "price: $price\n";
#  print "stars: $stars", yellow("★"), "\n";
#  print "prime: $prime ", $prime == 1 ? darkYellow("✔").cyan("prime") : "", "\n";
#  print "vendor: $vendor\n";
#  print "fulfilled $fulfilled\n";

  print bold($title), " -- $curr$price; $stars" . yellow("★"),
	$prime == 1 ? darkYellow(" ✔").cyan("prime") : "",
	defined($vendor) ? " sold by $vendor" : "",
	$fulfilled == 1 ? " fulfilled by Amazon " : " ",
	$shortUrl, "\n" if defined $title;

}

sub doXkcd {
  my $num = shift;
  my $url = "https://xkcd.com/$num/info.0.json";
  my %data;

  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    my $lines = $_;
    $lines =~ s/("|\d), "/\1,\n"/g;
    my @vals = split("\n", $lines);
    foreach my $e (@vals) {
      if ($e =~ /"(\w+)": (\d+|"[^"]+"),/) {
	my ($k, $v) = ($1, $2);
	$v =~ s/^"//; $v =~ s/"$//;
	$v =~ s/\\u([0-9a-f]{2,4})/chr(hex($1))/ige;
	#print "$k==>$v\n";
	$data{$k} = $v;
      }
    }
  }

  return if not defined($data{title});

  $data{transcript} =~ s/\\n/ /g;
  $data{alt} =~ s/\\n/ /g;

  if (defined($data{transcript}) and length($data{transcript}) > 200) {
    $data{transcript} = substr($data{transcript}, 0, 200) . "…";
  }

  if (defined($data{alt}) and length($data{alt}) > 80) {
    $data{alt} = substr($data{alt}, 0, 80) . "…";
  }

  $data{month} = "0$data{month}" if $data{month} < 10;

  my $shortimg = shortenUrl($data{img});
  $shortimg = $data{img} if not defined($shortimg);

  print italic("xkcd"), " #$data{num}: ", bold($data{safe_title}),
    " ($data{year}/$data{month}) img: ${shortimg}";
  print " -- $data{transcript}"
    if defined $data{transcript} and length($data{transcript}) > 0;
  print " -- alt: $data{alt}"
    if defined $data{alt} and length($data{alt}) > 0;
  print "\n";
}

sub doImgur {
  my $url = shift;
  return if not defined $imgur_key;

  my $isgal = 0;
  my $isalb = 0;
  my $isimg = 0;

  my $hash = undef;
  if ($url =~ m!/gallery/([0-9A-Za-z_]+)/?(#[0-9A-Za-z_]+)?$!) {
    $hash = $1;
    $isgal = 1;
  }
  if ($url =~ m!/a/([0-9A-Za-z_]+)/?$!) {
    $hash = $1;
    $isalb = 1;
  }
  if ($url =~ m!imgur\.(com|io)/+([0-9A-Za-z_]+)(\.(png|gifv?|jpe?g|mp4|webp))?(\?.*)?$!i) {
    $hash = $2;
    $isimg = 1;
  }
  if ($url =~ m!imgur\.(com|io)/r/\w+/([0-9A-Za-z_]+)/?$!) {
    $hash = $2;
    $isimg = 1;
  }
  if ($url =~ m!imgur\.(com|io)/t/\w+/([0-9A-Za-z_]+)/?$!) {
    $hash = $2;
    $isgal = 1;
  }

  my $apiurl = undef;
  $apiurl = "https://api.imgur.com/3/image/$hash" if $isimg == 1;
  $apiurl = "https://api.imgur.com/3/album/$hash" if $isalb == 1;
  $apiurl = "https://api.imgur.com/3/gallery/$hash" if $isgal == 1;

  print "unrecognized url: $url\n" if not defined $apiurl;
  return if not defined $apiurl;

  my %data;
  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$apiurl' --request GET --header 'Authorization: Client-ID $imgur_key'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    #print;
    my $lines = $_;
    $lines =~ s/(null|true|false|"|\d),\s*"/\1,\n"/g;
    my @vals = split("\n", $lines);
    foreach my $e (@vals) {
      #print "$e\n";
      if ($e =~ /"(\w+)":\s*(\d+|"[^"]+"|true|false|null),/) {
	my ($k, $v) = ($1, $2);
	$v =~ s/^"//; $v =~ s/"$//;
	if (not defined $data{$k}) {
	  #print "$k==>$v\n";
	  $data{$k} = $v;
	  $data{$k} = undef if $v eq "null";
	}
      }
    }
  }
  close(HTTP);

  return if not defined $data{success} or $data{success} eq "false";

  my $title = $data{title};
  $title = unescape($title) if defined $title;
  $title = "Untitled" if not defined $title;
  my $desc = $data{description};
  if (defined $desc) {
    $desc = unescape($desc);
    if (length $desc > 100) {
      $desc = substr($desc, 0, 100) . "…";
    }
  }

  if ($url =~ /imgur\.io/) {
    $url =~ s/imgur\.io/imgur.com/;
    print "$url — ";
  }

  use integer;
  print bold(" \"$title\"") if defined $title;
  print " by \@$data{account_url}" if defined $data{account_url};
#  print " on ", scalar(gmtime($data{datetime})), " UTC;"
#    if defined $data{datetime};
  print " $data{views} views" if defined $data{views};
  print green(" $data{ups}↑") if defined $data{ups};
  print red(" $data{downs}↓") if defined $data{downs};
  print " /r/$data{section}" if defined $data{section};
  print " [$data{images_count} images]"
    if defined $data{images_count} and $data{images_count} > 1;
  print " [animated]" if defined $data{animated} and $data{animated} eq "true";
  print " [$data{width}x$data{height}]"
    if defined $data{width} and $data{width} > 0;
  print " (" . $data{size} / 1024 . "kB)"
    if defined $data{size} and $data{size} > 0;
  print yellow(" [sound]")
    if defined $data{has_sound} and $data{has_sound} eq "true";
  print red(" [NSFW]") if defined $data{nsfw} and $data{nsfw} eq "true";
#  print " preview: http://i.imgur.com/${hash}l.jpg" if $isimg == 1 and
#	($data{width} > 640 or $data{height} > 640);
  print ": $desc" if defined $desc;
  print "\n";
}

sub doFccApp {
  my $url = shift;
  my ($appId, $fileno, $call, $status, $receipt, $action, $systematic, $relative, $req, $paid);
  my $purpose;
  if ($url =~ m|https?://wireless2.fcc.gov/UlsApp/ApplicationSearch/.*\?applID=(\d+)|) {
    $appId = $1;
  }
  $url = "http://wireless2.fcc.gov/UlsApp/ApplicationSearch/applMain.jsp?applID=$appId";
  #print "$url\n";
  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  my $inStatus = 0;
  my $inReceipt = 0;
  my $inAction = 0;
  while(<HTTP>) {
    #print;
    if (m|title="Link to License in new window" target="_new">([^<]+)</a>|) {
      $call = $1;
      #print "call $call\n"
    }
    $purpose = "Administrative Update" if /Administrative Update/;
    $purpose = "Renewal" if /Renewal Only/;
    $purpose = "New License" if /NE - New/;
    if (/>File Number</) {
      $_ = <HTTP>;
      if (/>(\d+)\s*&nbsp;/) {
	$fileno = $1;
      }
    }
    $inStatus = 1 if />Application Status</;
    if ($inStatus and /-\s*(\w+)\s*$/) {
      $status = $1;
      #print "status: $status\n";
      $inStatus = 0;
    }
    $inReceipt = 1 if />Receipt Date</;
    if ($inReceipt and m|\s*([01][0-9]/[0-3][0-9]/\d{4})(&nbsp;)?<|) {
      $receipt = $1;
      #print "receipt: $receipt\n";
      $inReceipt = 0;
    }
    $inAction = 1 if />Action Date</;
    if ($inAction and m|\s*([01][0-9]/[0-3][0-9]/\d{4})(&nbsp;)?<|) {
      $action = $1;
      #print "action: $action\n";
      $inAction = 0;
    }
  }
  close(HTTP);

  $url = "https://wireless2.fcc.gov/UlsApp/ApplicationSearch/applAdminHistory.jsp?applID=$appId";
  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  while(<HTTP>) {
    $paid = 1 if /Payment Confirmed/;
  }
  close(HTTP);

  $url = "http://wireless2.fcc.gov/UlsApp/ApplicationSearch/applServiceSpecific.jsp?applID=$appId";
  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  my $inSystematic = 0;
  my $inPreflist = 0;
  my $inReq = 0;
  my @vanities;
  while(<HTTP>) {
    $inSystematic = 1 if />Request to change a station call sign systematically\?</;
    if ($inSystematic and /\s*(.*)&nbsp;</) {
      $systematic = $1;
      #print "systematic: $systematic\n";
      $systematic = undef if $systematic eq "";
      $inSystematic = 0;
    }
    if (/Close Relative of Former Holder - (.+?)\s*$/) {
      $relative = $1;
    }
    $inReq = 1 if />Requested Call Sign</;
    if ($inReq and /^\s*([A-Z0-9]+)\s*&nbsp;</) {
      $req = $1;
      $inReq = 0;
    }
    $inPreflist = 1 if /Reference Copy Displays Call Sign Preference Information Out Of Order/;
    if ($inPreflist and /(&nbsp;)*(\d+)\.(&nbsp;)+(.+?)\s*</) {
      my ($n, $c) = ($2, $4);
      #print "$n: $c\n";
      $vanities[$n-1] = decodeEntities($c);
    }
  }
  close(HTTP);

  if (defined $fileno) {
    print bold($fileno), ": ";
    print bold($call), ": " if defined $call;
    $status = lightblue($status) if $status eq "Pending";
    $status = green($status) if $status eq "Granted";
    $status = red($status) if $status eq "Dismissed";
    $status = yellow($status) if $status eq "Inactive";
    print "$status -- ";
    print "$purpose; " if defined $purpose;
    print green("PAID"), "; " if $paid;
    print "systematic; " if defined $systematic and $systematic ne "N";
    print "received $receipt, last action $action; " if defined $receipt;
    print "vanity list: ", join(", ", @vanities) if defined $vanities[0];
    print "relative: $relative " if defined $relative;
    print "requested: $req" if defined $req;
    print "\n";
  }
}

sub doAe7qRegion {
  my $area = shift;
  my $libdir = dirname(realpath(__FILE__));
  if (-e "$libdir/ae7q") {
    exec "$libdir/ae7q", "$area" or die "error execing ae7q for '$area'";
  }
}

sub doAe7qCall {
  my $call = shift;
  my $libdir = dirname(realpath(__FILE__));
  if (-e "$libdir/ae7q") {
    exec "$libdir/ae7q", "$call" or die "error execing ae7q for '$call'";
  }
}

sub unescape {
  my $s = shift;
  $s =~ s/\\n/ /g;
  $s =~ s/\\"/"/g;
  $s =~ s|\\/|/|g;
  $s =~ s|\\u([0-9a-f]{4})|chr hex $1|eg;
  return $s;
}

sub uniq {
  my %seen;
  grep !$seen{$_}++, @_;
}

sub deamp {
  my $url = shift;
  my $deamped;
  open (HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  while (<HTTP>) {
    if (m|<link\s+rel="?canonical"?\s+href="?(.*?)"?\s*/?>|i) {
      $deamped = $1;
    }
    if (m|<link\s+href="?(.*?)"?\s+rel="?canonical"?\s*/?>|i) {
      $deamped = $1;
    }
    if (m|"canonicalUrl":"(.*?)"|i) {
      $deamped = $1;
    }
  }
  close(HTTP);
  return $deamped;
}

sub strip_html {
  my $t = shift;
  $t =~ s|<br/?>|\n|ig;
  $t =~ s|</p><p[^>]*>|\n|ig;
  $t =~ s|<.*?>||g;
  $t =~ s| +| |g;
  $t = decodeEntities($t);
  return $t;
}
