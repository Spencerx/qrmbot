#!/usr/bin/perl
#
# 2-clause BSD license.
# Copyright (c) 2019, 2020, 2023 molo1134@github. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");
use Encode qw(decode);
use I18N::Langinfo qw(langinfo CODESET);
use JSON qw( decode_json );
use URI::Escape;
use Math::Round;
use POSIX qw(floor);
use POSIX qw(strftime);
use POSIX qw(tzset);
use Time::Piece ();

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Location;
use Util;

STDOUT->autoflush();
STDERR->autoflush();

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

#my $baseUrl = "https://globe.adsb.fi/";
#my $baseUrl = "https://globe.theairtraffic.com/";
my $baseUrl = "https://api.adsb.lol/";
my $apitype = "lol";
#my $baseUrl = "https://globe.adsb.lol/";
#my $apitype = "reapi";

our $apikey_adsb_fi;
my $apikeyfile = $ENV{'HOME'} . "/.adsb-api-keys";
if ( -e ($apikeyfile)) {
  require ($apikeyfile);
} else {
  print "warning: unable to read file $apikeyfile\n"
}

my $callOrReg;
my $icaoQuery;
my $loc;

my $i = 0;
while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /--geo/) {
    $i++;
    $loc = $ARGV[$i] if not defined $loc;
    $i++;
    next;
  }
  if ($ARGV[$i] =~ /--help/) {
    print "usage: adsb [--fi|--lol|--tac] <location>|<0xHEXCODE>|<callsign>|<registration>\n";
    #    print "usage: adsb <location>|<0xHEXCODE>|<callsign>|<registration>\n";
    exit $exitnonzeroonerror;
  } elsif ($ARGV[$i] =~ /--fi/) {
    $baseUrl = "https://globe.adsb.fi/";
    $apitype = "reapi";
  } elsif ($ARGV[$i] =~ /--lol/) {
    $baseUrl = "https://api.adsb.lol/";
    $apitype = "lol";
    #$baseUrl = "https://globe.adsb.lol/";
    #$apitype = "reapi";
  } elsif ($ARGV[$i] =~ /--(tac|atc|theairtraffic)/) {
    $baseUrl = "https://globe.theairtraffic.com/";
    $apitype = "reapi";
  } elsif ($ARGV[$i] =~ /^0x([A-F0-9]{6})$/i) {
    $icaoQuery = $1;
    #print "icaoQuery: $icaoQuery\n";
  } elsif ($ARGV[$i] =~ /^[A-Z0-9-]+$/) {
    $callOrReg = $ARGV[$i];
  } else {
    if (defined($loc)) {
      $loc = $loc . " " . $ARGV[$i];
    } else {
      $loc = $ARGV[$i];
    }
  }
  $i++;
}

updateICAOtypes();

#print "apitype: $apitype\n";
if ($apitype eq "reapi") {

  my $apikey = $apikey_adsb_fi if $baseUrl =~ /adsb\.fi/;
  my $apiheaderOpt = "";
  $apiheaderOpt = "-H 'access-key: $apikey'" if $baseUrl =~ /adsb\.fi/;

  my $reapiUrl = "${baseUrl}re-api/";

  my $geo;
  my ($lat, $lon);
  my $url;
  #print "loc: $loc\n";
  if (defined($icaoQuery)) {
    $url = "${reapiUrl}?find_hex=" . uri_escape($icaoQuery);
  } elsif (defined($callOrReg)) {
    $url = "${reapiUrl}?find_reg=" . uri_escape($callOrReg);
  } elsif (defined($loc) and $loc =~ /^-?\d+(.\d+)?,-?\d+(.\d+)?$/) {
    ($lat, $lon) = split /,/, $loc;
    $url = "${reapiUrl}?closest=" . uri_escape($lat) . "," .
      uri_escape($lon) . ",25"; # 25 nmi
  } elsif (defined($loc)) {
    $loc =~ s/^\s*//;
    $loc =~ s/\s*$//;
    $geo = argToCoords($loc);
    ($lat, $lon) = split /,/, $geo;
    $url = "${reapiUrl}?closest=" . uri_escape($lat) . "," .
      uri_escape($lon) . ",25"; # 25 nmi
  } else {
    print "usage: adsb [--fi|--lol|--tac] <location>|<0xHEXCODE>|<callsign>|<registration>\n";
    exit $exitnonzeroonerror;
  }


  my $total = 0;

  DOHTTP_REAPI:

  #print "$url\n";
  #print "curl --stderr - --max-time 10 -s -k -L $apiheaderOpt '$url'";
  open(HTTP, '-|', "curl --stderr - --max-time 10 -s -k -L $apiheaderOpt '$url'");
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $json = <HTTP>;
  close(HTTP);
  if (not $json =~ /^\s*{/) {
    print "error1 while retrieving data: from $url : $json\n";
    exit $exitnonzeroonerror;
  }
  my $j = decode_json($json);

  $total = $j->{resultCount};

  if ($total == 0 and defined($callOrReg) and $url =~ /find_reg/) {
    $url = "${reapiUrl}?find_callsign=" . uri_escape($callOrReg);
    goto DOHTTP_REAPI;
  }

  print "no callsign/registration found: $callOrReg\n"
	  if $total == 0 and $url =~ /find_callsign/;
  print "icao code not found: $icaoQuery\n"
	  if $total == 0 and $url =~ /find_hex/;
  if ($total == 0 and $url =~ /closest/) {
    my $localgrid = coordToGrid($lat, $lon) if defined($lat);
    print "no planes found near $localgrid\n";
  }
  exit $exitnonzeroonerror if $total == 0;

  show($j->{aircraft}->[0], $j->{now}, $lat, $lon);

} elsif ($apitype eq "lol") {

  my ($url, $lat, $lon, $geo);

  if (defined($icaoQuery)) {
    $url = "${baseUrl}v2/hex/" . uri_escape($icaoQuery);
  } elsif (defined($callOrReg)) {
    $url = "${baseUrl}v2/reg/" . uri_escape($callOrReg);
  } elsif (defined($loc) and $loc =~ /^-?\d+(.\d+)?,-?\d+(.\d+)?$/) {
    ($lat, $lon) = split /,/, $loc;
    $url = "${baseUrl}v2/closest/" . uri_escape($lat) . "/" .  uri_escape($lon) . "/25"; # 25 nmi
  } elsif (defined($loc)) {
    $loc =~ s/^\s*//;
    $loc =~ s/\s*$//;
    $geo = argToCoords($loc);
    ($lat, $lon) = split /,/, $geo;
    $url = "${baseUrl}v2/closest/" . uri_escape($lat) . "/" .  uri_escape($lon) . "/25"; # 25 nmi
  } else {
    print "usage: adsb [--fi|--lol|--tac] <location>|<0xHEXCODE>|<callsign>|<registration>\n";
    exit $exitnonzeroonerror;
  }

  DOHTTP_LOL:
  #print "$url\n";
  open(HTTP, '-|', "curl --stderr - --max-time 10 -s -k -L '$url'");
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $json = <HTTP>;
  close(HTTP);
  if (not $json =~ /^\s*{/) {
    print "error1 while retrieving data: from $url : $json\n";
    exit $exitnonzeroonerror;
  }
  my $j = decode_json($json);

  my $total = $j->{total};

  if ($total == 0 and defined($callOrReg) and $url =~ m|/reg/|) {
    $url = "${baseUrl}v2/callsign/" . uri_escape($callOrReg);
    goto DOHTTP_LOL;
  }

  print "no callsign/registration found: $callOrReg\n"
	  if $total == 0 and $url =~ m|/callsign/|;
  print "icao code not found: $icaoQuery\n"
	  if $total == 0 and $url =~ m|/hex/|;
  if ($total == 0 and $url =~ /closest/) {
    my $localgrid = coordToGrid($lat, $lon) if defined($lat);
    print "no planes found near $localgrid\n";
  }
  exit $exitnonzeroonerror if $total == 0;

  show($j->{ac}->[0], $j->{now}, $lat, $lon);
}

sub updateICAOtypes {
  #my $url = "https://www4.icao.int/doc8643/External/AircraftTypes";
  my $url = "https://web.archive.org/web/20230101013553/https://www4.icao.int/doc8643/External/AircraftTypes";
  my $typesfile = $ENV{'HOME'} . "/.icao-types";
  my $needICAO = 0;
  my $now = time;
  my $maxage=604800; # 1 week
  if (not -e $typesfile) {
    $needICAO = 1
#  } else {
#    my (undef, undef, undef, undef, undef, undef, undef, $size, undef, $mtime, undef, undef, undef) = stat $typesfile;
#    if (defined $mtime) {
#      my $age = $now - $mtime;
#      if ($age > $maxage or $size == 0) {
#	$needICAO = 1;
#      }
#    } else {
#      $needICAO = 1;
#    }
  }
  if ($needICAO == 1) {
    #print "$url\n";
    system("curl --stderr - -s -k -L --max-time 20 --retry 1 -o '$typesfile' -d '' '$url'");
  }
}

sub show
{
  my %rec = %{ (shift) };
  my $timestamp = shift;
  my $lat = shift;
  my $lon = shift;

  $rec{lat} = $rec{lastPosition}->{lat} if not defined $rec{lat} and defined $rec{lastPosition}->{lat};
  $rec{lon} = $rec{lastPosition}->{lon} if not defined $rec{lon} and defined $rec{lastPosition}->{lon};
  $rec{seen_pos} = $rec{lastPosition}->{seen_pos} if not defined $rec{seen_pos} and defined $rec{lastPosition}->{seen_pos};

  my $grid = coordToGrid($rec{lat}, $rec{lon});
  my $place = geolocate($rec{lat}, $rec{lon});
  my ($dist, $bearing) = distBearing($lat, $lon, $rec{lat}, $rec{lon});
  my $time = strftime("%H:%M:%Sz", gmtime(int($timestamp - $rec{seen_pos})));
  $time = strftime("%Y-%m-%d %H:%M:%Sz", gmtime(int($timestamp - $rec{seen_pos}))) if $rec{seen_pos} > 86400;

  my ($manuf, $model, $type, $etype, $icao, $owner);
  #if ($rec{r} =~ m/^N/) {
  #  ($manuf, $model, $type, $etype, $icao, $owner) = getFaaReg($rec{r});
    #print("FAA reg: $manuf, $model, $type, $etype, $icao, $owner\n");
  #}
  ($manuf, $model, $type, $etype, $icao, $owner) = getAirFrame($rec{hex});
  #print("db: $manuf, $model, $type, $etype, $icao, $owner\n");

  my ($airline, $orig, $dest, $fnum, $eta);
  if (defined($rec{flight}) and length($rec{flight}) > 0) {
    $rec{flight} =~ s/\s*$//;
    ($airline, $orig, $dest, $fnum, $eta) = getFlightTrack($rec{flight});
    #print("flight1: $airline, $orig, $dest, $fnum, $eta\n");
  } else {
    ($airline, $orig, $dest, $fnum, $eta) = getFlightTrack($rec{r});
    #print("flight2: $airline, $orig, $dest, $fnum, $eta\n");
  }
  #print join(",", ($airline, $orig, $dest)), "\n";
  #print join(",", ($manuf, $model, $type, $etype, $icao, $owner)), "\n";

  # see: https://en.wikipedia.org/wiki/List_of_transponder_codes
  my $squawknote = "";
  if ($rec{squawk} == 1200 or $rec{squawk} == 7000) {
    $squawknote = green(" [VFR]");
  } elsif ($rec{squawk} == 7500) {
    $squawknote = red(" [Hijack]");
  } elsif ($rec{squawk} == 7600) {
    $squawknote = red(" [RadioFailure]");
  } elsif ($rec{squawk} == 7700) {
    $squawknote = red(" [Emergency]");
  } elsif ($rec{squawk} == 0) {
    $squawknote = red(" [Mil Intercept]");
  } elsif ($rec{squawk} == 25 or $rec{squawk} == 33) {
    $squawknote = green(" [Parachute dropping]");
  } elsif ($rec{squawk} >= 41 and $rec{squawk} <= 57) {
    $squawknote = green(" [VFR]");
#  } elsif ($rec{squawk} == 1000) {
#    $squawknote = yellow(" [IFR]");
  } elsif ($rec{squawk} == 1201) {
    $squawknote = green(" [VFR]");
  } elsif ($rec{squawk} == 1202) {
    $squawknote = green(" [VFR glider]");
  } elsif ($rec{squawk} == 1255) {
    $squawknote = yellow(" [Fire]");
  } elsif ($rec{squawk} >= 1203 and $rec{squawk} <= 1272) {
    $squawknote = green(" [Defense VFR]");
  } elsif ($rec{squawk} >= 1273 and $rec{squawk} <= 1275) {
    $squawknote = yellow(" [CPME Parrot]");
  } elsif ($rec{squawk} == 1276) {
    $squawknote = yellow(" [ADIZ w/o ATC]");
  } elsif ($rec{squawk} == 1277) {
    $squawknote = yellow(" [VFR SAR]");
  } elsif ($rec{squawk} == 1400) {
    $squawknote = green(" [VFR]");
  } elsif ($rec{squawk} == 2000) {
    $squawknote = yellow(" [IFR/SSR]");
  } elsif ($rec{squawk} == 4000) {
    $squawknote = green(" [VFR Mil Training]");
  } elsif ($rec{squawk} == 4453) {
    $squawknote = yellow(" [High balloon ops]");
  } elsif ($rec{squawk} >= 4434 and $rec{squawk} <= 4437) {
    $squawknote = yellow(" [WX Recon]");
  } elsif ($rec{squawk} == 4453) {
    $squawknote = yellow(" [High balloon ops]");
  } elsif ($rec{squawk} >= 4400 and $rec{squawk} <= 4477) {
    $squawknote = yellow(" [Reserved High Altitude Mil]");
  } elsif ($rec{squawk} == 5000 or $rec{squawk} == 5400 or $rec{squawk} == 6100 or $rec{squawk} == 6400) {
    $squawknote = yellow(" [NORAD]");
  } elsif ($rec{squawk} == 5061 or $rec{squawk} == 5062 or $rec{squawk} == 5100 or $rec{squawk} == 5200) {
    $squawknote = yellow(" [TRACON]");
  } elsif ($rec{squawk} == 7400) {
    $squawknote = yellow(" [UAV lost link]");
  } elsif ($rec{squawk} >= 7501 and $rec{squawk} <= 7577) {
    $squawknote = yellow(" [NORAD]");
  } elsif ($rec{squawk} >= 7601 and $rec{squawk} <= 7607) {
    $squawknote = red(" [FAA Reserved]");
  } elsif ($rec{squawk} >= 7701 and $rec{squawk} <= 7707) {
    $squawknote = red(" [FAA Reserved]");
  } elsif ($rec{squawk} == 7777) {
    $squawknote = red(" [RABM BITE]") . "/" . red("[DOD Intercept]");
  }

  ################### formatted output

  if (defined($rec{flight}) and length($rec{flight}) > 0 and
      $rec{flight} ne $rec{r}) {
    print bold("$rec{flight}/$rec{r}");
  } else {
    print bold($rec{r});
  }
  if (not defined($model)) {
    print " ($rec{t})";
  } else {
    print " ($manuf $model)" if defined $manuf;
    print " ($model)" if not defined $manuf;
  }
  print " ($airline $fnum ", bold("$orig->$dest") if defined $airline;
  print " eta $eta" if defined $eta;
  print ")" if defined $airline;
  print " 0x$rec{hex}; ";
  print "squawk $rec{squawk}$squawknote " if defined $rec{squawk} and length($rec{squawk}) > 0;
  print "alt $rec{alt_geom} ft;" if defined $rec{alt_geom};
  print "alt ~$rec{alt_baro} ft;" if defined $rec{alt_baro} and not defined $rec{alt_geom};
  printf (" track %.0f° %s; gnd speed %.0f knots", $rec{track}, azToNEWS($rec{track}), $rec{gs});
  print yellow(" MODE-S") if $rec{type} eq "mode_s";
  print yellow(" MLAT") if $rec{type} eq "mlat";
  print yellow(" TISB") if $rec{type} eq "tisb_icao";
  print green(" GND") if $rec{alt_baro} eq "ground" or $rec{alt_geom} eq "ground";
  if ($rec{alt_baro} eq "ground" or $rec{alt_geom} eq "ground" or $rec{alt_geom} <= 0 or $rec{gs} == 0) {
    print " at ";
  } else {
    print " over "
  }
  print "$place ($grid)";
  print " at $time";
  print "; owner: $owner" if defined $owner;
  printf (" -- %.1f km, %.0f° %s", $dist, $bearing, azToNEWS($bearing)) if defined($lat);
  my $localgrid = coordToGrid($lat, $lon) if defined($lat);
  print " from $localgrid" if defined($localgrid);

  if (defined($icao) and defined($rec{hex}) and lc $icao ne lc $rec{hex}) {
    print(" -- ", yellow("warning"));
    print(": observed ICAO mode S code $rec{hex} differs from registered code $icao");
  }

  print " -- ${baseUrl}?icao=$rec{hex}\n" if $apitype eq "reapi";
  print " -- https://adsb.lol/$rec{hex}\n" if $apitype eq "lol";
}

sub getFaaReg
{
  my $reg = shift;
  my ($manuf, $model, $type, $etype, $icao, $owner, $frac);
  $frac = 0;
  my $url = "https://registry.faa.gov/AircraftInquiry/Search/NNumberResult?nNumberTxt=$reg";
  my $headers =
    "-H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' " .
    "-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' " .
    "-H 'Accept-Encoding: gzip, deflate, br'";
  #print "$url\n";
  open(HTTP, '-|', "curl --stderr - --max-time 4 -s -k $headers -L '$url'");
  while(<HTTP>) {
    #print;
    if (m|<td data-label="Manufacturer Name">([^<]+?)\s*</td>|) {
      $manuf = decodeEntities($1);
    }
    if (m|<td data-label="Model">([^<]+?)\s*</td>|) {
      $model = decodeEntities($1);
    }
    if (m|<td data-label="Aircraft Type">([^<]+?)\s*</td>|) {
      $type = decodeEntities($1);
    }
    if (m|<td data-label="Engine Type">([^<]+?)\s*</td>|) {
      $etype = decodeEntities($1);
    }
    if (m|<td data-label="Name" colspan="3">([^<]+?)\s*</td>|) {
      $owner = decodeEntities($1);
    }
    if (m|<td data-label="Mode S Code \(Base 16 / Hex\)">([0-9A-F]{6})</td>|) {
      $icao = $1;
    }
    $frac = 1 if m|<td data-label="Fractional Owner">YES</td>|;
  }
  close(HTTP);
  $owner .= " (fractional)" if $frac;
  return ($manuf, $model, $type, $etype, $icao, $owner);
}

sub getAirFrame
{
  my $hex = shift;

  my $needUpdate = 0;
  my $now = time;
  my $maxage=604800; # 1 week
  my $cachedir = $ENV{HOME} . "/.qrmbot/cache";
  my $regCacheFile = $cachedir . "/aircraft.csv.gz";
  my $url = "https://github.com/katlol/tar1090-db/releases/latest/download/aircraft.csv.gz";

  if (not -d $cachedir) {
    print "making cache directory..\n";
    system ("mkdir -p $cachedir\n");
    if (not -d $cachedir) {
      print "unable to make cache directory $cachedir\n";
    }
  }

  if (not -e $regCacheFile) {
    $needUpdate = 1;
  } else {
    my (undef, undef, undef, undef, undef, undef, undef, $size, undef, $mtime, undef, undef, undef) = stat $regCacheFile;
    if (defined $mtime) {
      my $age = $now - $mtime;
      if ($age > $maxage or $size == 0) {
	$needUpdate = 1;
      }
    } else {
      $needUpdate = 1;
    }
  }
  if ($needUpdate == 1) {
    #print "$url\n";
    system("curl --stderr - -s -k -L --max-time 20 --retry 1 -o '$regCacheFile' '$url'");
  }

  return undef if not -e $regCacheFile;

  local $/ = "\n";   # line-based IO
  open(CSV, '-|', "gzip -dc $regCacheFile");
  my ($hexcode,$reg,$type,$desc,$yr,$owner);
  while(<CSV>) {
    ($hexcode,$reg,$type,undef,$desc,$yr,$owner) = split /;/;

    last if lc $hex eq lc $hexcode;

    $hexcode = $reg = $type = $desc = $yr = $owner = undef;
  }
  close(CSV);

  $reg = undef if $reg eq "";
  $type = undef if $type eq "";
  $yr = undef if $yr eq "";
  $owner =~ s/^\s+//;
  $owner =~ s/\s+$//;
  $owner = undef if $owner eq "";
  $desc =~ s/^\s+//;
  $desc =~ s/\s+$//;
  $desc = undef if $desc eq "";

  #print "db: $reg, $type, $desc, $yr, $owner\n";
  return (undef, $desc, $type, undef, $hexcode, $owner);
}

sub getFlightTrack
{
  my $flight = shift;
  my $url = "https://flightaware.com/live/flight/$flight";
  my ($airline, $orig, $dest, $fnum, $eta);
  my $token;
  #print "$url\n";
  open(HTTP, '-|', "curl --stderr - --max-time 10 -s -k -L '$url'");
  while(<HTTP>) {
    if (/name="origin".*content="([A-Z]+)"/) {
      $orig = $1;
    }
    if (/name="destination".*content="([A-Z]+)"/) {
      $dest = $1;
    }
    if (m|"shortName":"([^"]*)"|) {
      $airline = $1;
    }
    if (m|name="twitter:description" content="Track.*?#(\d+)\s+.*?"\s*/>|) {
      $fnum = $1;
    }
    # var trackpollGlobals = {"TOKEN":"dd1320656957446e91ec1b5b1b04d2ce5a7d0a670f899c2e--da74a34ace4ede66ab25308cec9e6b9338c28a99","INTERVAL":65,"SINGLE_FLIGHT":true,"USERTOKEN":"323564526"};
    if (m|trackpollGlobals.*"TOKEN":"([0-9a-f-]+)"|) {
      $token = $1;
      #print "token: $token\n";
    }
  }
  close(HTTP);

  if (defined($token)) {
    $url = "https://flightaware.com/ajax/trackpoll.rvt?token=$token&locale=en_US&summary=1";
    #print "$url\n";
    open(HTTP, '-|', "curl --stderr - --max-time 10 -s -k -L '$url'");
    while(<HTTP>) {
      #print;
      if (m/"actual":\d+\},"landingTimes":\{"scheduled":\d+,"estimated":(\d+),"actual":null/) {
	my $estimated = $1;
	my $now = time();
	#print "estimated: $estimated\n";
	#print "now $now\n";
	if ($estimated > $now) {
	  my $m = (($estimated - $now) / 60) % 60;
	  my $h = floor((($estimated - $now) / 60) / 60);
	  $eta = "${h}h${m}m" if $h > 0;
	  $eta = "${m}m" if $h <= 0;
	  #print "$eta\n";
	}
      }
    }
    close(HTTP);
  }

  return ($airline, $orig, $dest, $fnum, $eta);
}
