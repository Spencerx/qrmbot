#!/usr/bin/perl

# 2-clause BSD license.
# Copyright (c) 2021, 2022 molo1134@github. All rights reserved.

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Util;

use URI::Escape;
use Time::Piece ();
use POSIX qw(strftime);
use strict;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
my $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

my $callsearch_url = "https://www.1x1callsigns.org/1x1search.php?callsign=";
my $eventsearch_url = "https://www.1x1callsigns.org/1x1search.php?event=";
my $detail_url = "https://www.1x1callsigns.org/1x1search.php?byid=";


if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  if ($username eq getEggdropUID()) {
    print "usage: !1x1 <callsign>|<search term>\n";
  } else {
    print "usage: $0 <callsign>|<search term>\n";
  }
  exit $exitnonzeroonerror;
}

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my $call = uc $ARGV[0];
$call =~ s/^\s*//;
$call =~ s/\s*$//;

if ($call =~ /^[WNK][0-9][A-Z]$/) {
  open(INDEX, '-|', "curl -k -L --max-time 10 --retry 1 -s '${callsearch_url}${call}' ");
} else {
  my $query = join(" ", @ARGV);
  my $encodedquery = uri_escape($query);
  open(INDEX, '-|', "curl -k -L --max-time 10 --retry 1 -s '${eventsearch_url}${encodedquery}' ");
}

my @rec;
local $/;   # read entire file -- FIXME: potentially memory hungry
my $index = <INDEX>;
$index =~ s|</tr><|</tr>\n<|g;
my @lines = split /\n/, $index;
foreach my $l (@lines) {
  if ($l =~ m|<a href=/1x1search.php\?byid=(\d+)>details</a>|) {
    push @rec, $1;
  }
  next;
}
close(INDEX);

if (0 == scalar @rec) {
  print "not found\n";
  exit $exitnonzeroonerror;
}

my $now = time();
my %details;
my $found = 0;
foreach my $r (@rec) {

  my ($rcall, $event, $sepoch, $eepoch, $sdate, $edate, $by, $orig_call, $addr, $email, $phone);

  open(DETAIL, '-|', "curl -k -L --max-time 10 --retry 1 -s '${detail_url}${r}'");
  while (<DETAIL>) {

    if (m|<tr><td>1x1call</td><td>([WNK][0-9][A-Z])</td></tr>|) {
      $rcall = $1;
    }
    if (m|<tr><td>Event</td><td>(.*?)</td></tr>|) {
      $event = decodeEntities($1);
    }
    if (m|<tr><td>Start</td><td>([0-9]{4}-[0-9]{2}-[0-9]{2})</td></tr>|) {
      $sdate = $1;
      $sepoch = Time::Piece->strptime($sdate, "%Y-%m-%d")->epoch;
      # ARRL: Assignments are made by calendar date, for the full day at
      # Coordinated Universal Time (UTC) or Zulu Time (Z):  0000Z to 2359Z
    }
    if (m|<tr><td>End</td><td>([0-9]{4}-[0-9]{2}-[0-9]{2})</td></tr>|) {
      $edate = $1;
      $eepoch = Time::Piece->strptime($edate, "%Y-%m-%d")->epoch;
      # ARRL: Assignments are made by calendar date, for the full day at
      # Coordinated Universal Time (UTC) or Zulu Time (Z):  0000Z to 2359Z
    }
    if (m|<tr><td>Requestor</td><td>(.*?)</td></tr>|) {
      $by = decodeEntities($1);
    }
    if (m|<tr><td>Reqcall</td><td>(.*?)</td></tr>|) {
      $orig_call = uc $1;
    }
    if (m|<tr><td>Reqphone</td><td>(.*?)</td></tr>|) {
      $phone = $1;
    }
    if (m|<tr><td>Reqemail</td><td>.*?data-cfemail="([0-9a-f]+)">|i) {
      $email = $1;
      $email = decodeEmail($email);
    }
  }
  close(DETAIL);

  my $rel = undef;
  $rel = "past" if $eepoch < $now;
  $rel = "now" if $sepoch < $now and $eepoch > $now;
  $rel = "future" if $sepoch > $now;

  if (defined $rcall and $event) {
    print bold($rcall), ": $rel: ",  bold($event),
      " from $sdate to $edate by $orig_call ($by";
    print "; $email" if defined $email and $email ne "";
    if ($username ne getEggdropUID()) {
      print "; $phone" if defined $phone and $phone ne "";
    }
    print ")";
    print "\n";
    $found = 1;
  }
  last if defined $rel and $rel eq "past";
}

if ($found == 0) {
  print "error, not found\n";
  exit $exitnonzeroonerror;
}


# get the value of the encoded hex byte at position
sub decodeHexPos {
  my $str = shift;
  my $pos = shift;
  my $h = substr($str, $pos, 2);
  return hex($h);
}

sub decodeEmail {
  my $encoded = shift;
  my $output = "";
  # XORed with first byte of hex string
  my $xor = decodeHexPos($encoded, 0);

  for (my $i = 2; $i < length($encoded); $i += 2) {
    my $ascii = decodeHexPos($encoded, $i) ^ $xor;
    $output .= chr($ascii);
  }

  return lc $output;
}
