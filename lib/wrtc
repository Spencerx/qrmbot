#!/usr/bin/perl -w
#
# scrape WRTC standings for a callsign
#
# 2-clause BSD license.
# Copyright (c) 2022 molo1134@github. All rights reserved.

use strict;
use utf8;
use Encode qw(decode);
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Util;


@ARGV = map { decode "utf-8", $_ } @ARGV;
# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my $do2022 = 0;
my $do2026 = 0;

my @calls;
my $i = 0;
while ($i <= $#ARGV) {
  if ($ARGV[$i] eq "--2022") {
    $do2022 = 1;
  } elsif ($ARGV[$i] eq "--2026") {
    $do2026 = 1;
  } elsif ($ARGV[$i] =~ /^([a-z0-9]+\/)?\d?[a-z]{1,2}[0-9Øø]{1,4}[a-z]+(\/[a-z0-9]+)?$/i) {
    push @calls, uc $ARGV[$i];
  } else {
    print "warning: unexpected parameter: $ARGV[$i]\n";
  }
  $i++;
}

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);
# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

if (scalar @calls == 0) {
  if ($username eq getEggdropUID()) {
    print "usage: !wrtc [--2022] [--2026] <callsign> [callsign 2] ... [callsign N]\n";
  } else {
    print "usage: $0 [--2022] [--2026] <callsign> [callsign 2] ... [callsign N]\n";
  }
  exit $exitnonzeroonerror;
}

$do2026 = 1 if 0 == $do2022 and 0 == $do2026;

if ($do2026) {
  updateCty() if (checkCtyDat() == 1);
  my $ref = getDxccDataRef(); # load data
}

foreach my $c (@calls) {
  doWRTC2022($c) if $do2022;
  doWRTC2026($c) if $do2026;
}


sub doWRTC2022 {
  my $call = shift;

  my ($name, $pts, $claimed, $area_rank, $area, $cty_rank, $cty, $num_multi, $num_outside, $num_entries);
  my $lead = 0;
  my $member = 0;

  my $urlbase = "https://www.wrtc2022.it/en/qualification-standings-9.asp?CallsignEntries=1&callsign=";

  open (HTTP, '-|', "curl --max-time 60 -s -k -L '${urlbase}${call}'");
  while(<HTTP>) {
    if (m|<img src="/public1/dps/flags/([A-Z]+).png" id="score_callsign_flag"|i) {
      $cty = $1;
    }
    if (m|<div style="padding-top:20px;float:left;font-size:16px;font-weight:300;margin-right:10px;">(.*?)</div>|i) {
      $name = $1;
    }
    $lead = 1 if m/Eligible Team Leader/i;
    $member = 1 if m/Eligible Team Mate/i;
    if (m|Total WRTC qualification points:</span>\s*(\d+)\s*$|i) {
      $pts = $1;
    }
    if (m|Total WRTC qualification points (with claimed scores):</span>\s*(\d+)\s*$|i) {
      $claimed = $1;
    }
    if (m|Area rank:</span>\s*(\d+)\s*in <.*?>([A-Z0-9]+)</a>|) {
      ($area_rank, $area) = ($1, $2);
    }
    if (m|Country rank:</span>\s*(\d+)\s*in <.*?>.*? - (.*?)</a>|) {
      ($cty_rank, $cty) = ($1, $2);
    }
    if (m|Multi operator entries:</span>\s*(\d+)|i) {
      $num_multi = $1;
    }
    if (m|Outside own area entries:</span>\s*(\d+)|i) {
      $num_outside = $1;
    }
    if (m|Total contest entries:</span>\s*(\d+)|i) {
      $num_entries = $1;
    }
  }
  close(HTTP);

  if (not defined $name) {
    print "2022: not found $call\n";
    return;
  }

  print "2022: ", bold($call), ": $name: $cty #$cty_rank; $area #$area_rank; Points: $pts";
  print "; ($claimed claimed)" if defined $claimed and $claimed != $pts;
  print "; ",  yellow("[Eligible Teammate]") if $member;
  print "; ", lightgreen("[Eligible Team Leader]") if $lead;
  print "\n";
}

sub doWRTC2026 {
  my $call = uc shift;

  my ($cty, $cty_name) = getCtyForCall($call);

  #print "$call: $cty\n";

  my $url = "https://www.wrtc2026.org/qualification-standings/qualification-standings-dxcc/";
  open(HTTP, '-|', "curl --max-time 15 -ksl -X POST '$url' -d 'dxcc=$cty'");
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $html = <HTTP>;
  close(HTTP);

  my ($cty_rank, $pts, $entries, $a_rank, $a_name);
  if ($html =~ m|<tr>\s*<td>(\d+)</td>\s*<td><a href="/qualification-standings/qualification-standings-callsign/\?callsign=$call">$call</a></td>\s*<td>(\d+)</td>\s*<td>(\d+)</td>\s*<td>(\d+)</td>\s*<td>([^<]+)</td>\s*</tr>|i) {
    ($cty_rank, $pts, $entries, $a_rank, $a_name) = ($1, $2, $3, $4, $5);
    #print "$call: ($cty_rank, $pts, $entries, $a_rank, $a_name)\n";
  }
  if (defined $a_name and $a_name ne "") {
    $a_name =~ s/\s*#\s*/-/;
  }
  if (not defined $cty_rank or $cty_rank eq "") {
    print "2026: $call not found\n";
    return;
  }

  print "2026: ", bold($call), ": $cty_name #$cty_rank; $a_name #$a_rank; Points: $pts";
  #print "; ($claimed claimed)" if defined $claimed and $claimed != $pts;
  #print "; ",  yellow("[Eligible Teammate]") if $member;
  #print "; ", lightgreen("[Eligible Team Leader]") if $lead;
  print "\n";
}

sub getCtyForCall {
  my $call = shift;

  my $ref = getDxccDataRef(); # data should already be loaded

  foreach my $rec (@{$ref->{rec}}) {
    my ($length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz) = split /\|/,$rec;

    if ($call =~ m/$pattern/i) {
      return ($dxcc, $name);
    }
  }
  return undef;
}
