#!/usr/bin/perl -w

# 2-clause BSD license.
# Copyright (c) 2018 AA4JQ. All rights reserved.
# Copyright (c) 2018, 2019, 2020, 2021 molo1134@github. All rights reserved.

use strict;
use warnings;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use JSON qw( decode_json );
use Math::Round;
use Math::BigFloat;
use POSIX qw(strftime);
use URI::Escape;

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Util;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

@ARGV=split(' ', join(' ',@ARGV));

our $apikey = undef;

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

my $quote;
my $search;
if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  $quote = "^DJI";
} elsif ($#ARGV > 0) {
  $search = join(" ", @ARGV);
  doSearch($search);
  exit $exitnonzeroonerror;
} else {
  $quote = $ARGV[0];
}

if ($quote =~ /cummies/i) {
  print "nope\n";
  exit 0;
}

my $ua = "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0";
my $cookiefile = $ENV{HOME} . "/.qrmbot/cache/yahoofinance.cookies";
my $crumbfile = $ENV{HOME} . "/.qrmbot/cache/yahoofinance.crumb";
my $needcookies = 0;
my $needcrumb = 0;
my $crumb = undef;

if (not -e $cookiefile) {
  $needcookies = 1;
} else {
  # check for expiration
  my $now = time();
  open(COOKIES, '<', $cookiefile);
  while(<COOKIES>) {
    next if /^# /;
    next if /^\s*$/;
    my (undef, undef, undef, undef, $ts) = split(/\t/);
    next if $ts == 0;
    $needcookies = 1 if $ts < $now;
  }
  close(COOKIES);
}

if ($needcookies) {
  my $url = "https://guce.yahoo.com/consent";
  $needcrumb = 1; # always need a new crumb when getting new cookies

  unlink $cookiefile;
  open(HTTP, '-|', "curl -4 --compressed --max-time 10 -s -k -L --cookie-jar $cookiefile -A '$ua' -H 'accept-language: en-US,en;q=0.9' '$url'");
  while(<HTTP>) {
  }
  close(HTTP);
}

if (not -e $crumbfile) {
  $needcrumb = 1;
} else {
  open(CRUMB, '<', $crumbfile);
  $crumb = <CRUMB>;
  close(CRUMB);
  $crumb =~ s/^\s+//;
  $crumb =~ s/\s+$//;
  if ($crumb eq "") {
    $needcrumb = 1;
    $crumb = undef;
  }
}

if ($needcrumb) {
  my $url = "https://query2.finance.yahoo.com/v1/test/getcrumb";
  open(HTTP, '-|', "curl -4 --compressed --max-time 10 -s -k -L --cookie $cookiefile --cookie-jar $cookiefile -A '$ua' -H 'accept-language: en-US,en;q=0.9' '$url'");
  $crumb = <HTTP>;
  close(HTTP);

  open(CRUMB, '>', $crumbfile);
  print CRUMB $crumb;
  close(CRUMB);
}

my $url = "https://query2.finance.yahoo.com/v7/finance/quote?lang=en-US&region=US&corsDomain=finance.yahoo.com&.tsrc=finance&symbols=${quote}&crumb=${crumb}";
open(HTTP, '-|', "curl -4 --compressed --max-time 10 -s -k -L --cookie $cookiefile -A '$ua' '$url'");
binmode(HTTP, ":utf8");
local $/;   # read entire file -- FIXME: potentially memory hungry
my $json = <HTTP>;
close(HTTP);
#print "$json\n"; #debug XXX

if (not $json =~ /^\s*{/) {
  if ($json =~ /^<!doctype/i or $json =~ /<html/i) {
    print "got html while retrieving data\n";
  } else {
    print "error1 while retrieving data: $json\n";
  }
  exit $exitnonzeroonerror;
}
my $j = decode_json($json);

if (not defined($j->{quoteResponse}) or defined($j->{quoteResponse}->{error})) {
  print "error while retrieving data: ";
  print $j->{quoteResponse}->{error};
  print "\n";
  exit $exitnonzeroonerror;
}

my $r = $j->{quoteResponse}->{result}[0];

if (not defined $r or not defined $r->{regularMarketPrice}) {
  doSearch($quote);
  exit $exitnonzeroonerror;
}

my ($open, $price, $vol, $chg, $pct, $prevclose);
$open = commify($r->{regularMarketOpen}) if defined($r->{regularMarketOpen});
$price = bold(commify($r->{regularMarketPrice})) if defined($r->{regularMarketPrice});
$vol = commify($r->{regularMarketVolume}) if defined($r->{regularMarketVolume});
if (defined ($r->{regularMarketChangePercent}) and isNumeric($r->{regularMarketChangePercent})) {
  $pct = nearest(0.1, $r->{regularMarketChangePercent})
} else {
  $pct = 0.0;
}
$prevclose = commify($r->{regularMarketPreviousClose}) if defined($r->{regularMarketPreviousClose});

#regularMarketChange suffers from floating point errors
if (defined $r->{regularMarketPrice}) {
  $chg = Math::BigFloat->new($r->{regularMarketPrice});
  $chg->bsub($r->{regularMarketPreviousClose});
} else {
  $chg = 0.0;
}

my $trend = 1;
$trend = 0 if defined($chg) and $chg == 0.0;
$trend = -1 if defined($chg) and $chg < 0.0;

my $trendsymbol;
$trendsymbol = green("↑") if $trend > 0;
$trendsymbol = lightblue("→") if $trend == 0;
$trendsymbol = red("↓") if $trend < 0;

my $name = $r->{displayName};
$name = $r->{shortName} if not defined $name;
$name = $r->{longName} if not defined $name;

print bold($r->{symbol}), " $trendsymbol$price ";

print "+$chg (" if $trend >= 0;
print "$chg (" if $trend < 0;
print green("+$pct") if $trend > 0;
print "+$pct" if $trend == 0;
print red($pct) if $trend < 0;
print "%)";

#print " bid: $r->{bid}x$r->{bidSize} ask: $r->{ask}x$r->{askSize}";
#print " bid: $r->{bid} ask: $r->{ask}";

print " prev. close: $prevclose" if defined $prevclose;
print " open: $open" if defined $open;
print " volume: $vol" if defined $vol;
print " ($name, $r->{fullExchangeName})";

$ENV{TZ} = $r->{exchangeTimezoneName};
print " as of ", strftime("%H:%M:%S %Z", localtime($r->{regularMarketTime}));

print "\n";

sub doSearch {
  my $term = shift;
  my $enc_term = uri_escape($term);
  my $url = "https://query2.finance.yahoo.com/v1/finance/search?q=$enc_term&quotesCount=6&newsCount=0";

  if ($term =~ /cummies/i) {
    print "nope\n";
    exit 0;
  }

  open(HTTP, '-|', "curl -4 --max-time 10 -s -k -L '$url'");
  #binmode(HTTP, ":utf8");  #breaks
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $json = <HTTP>;
  close(HTTP);
  #print "$json\n"; #debug XXX

  if (not $json =~ /^\s*{/) {
    if ($json =~ /^<!doctype/i or $json =~ /<html/i) {
      print "got html while retrieving data\n";
    } else {
      print "error1 while retrieving data: $json\n";
    }
    exit $exitnonzeroonerror;
  }
  #print "$json\n";
  my $j = decode_json($json);

  if (not defined($j->{quotes})) {
    print "error while retrieving data.\n";
    exit $exitnonzeroonerror;
  }

  my $i = 0;
  foreach my $quote (@{$j->{quotes}}) {
    my $name;
    $name = $quote->{shortname} if defined $quote->{shortname};
    $name = $quote->{longname} if defined $quote->{longname};
    
    print " -- " if $i++ > 0 and $username eq getEggdropUID();
    print "$quote->{symbol}: $name";
    print "\n" if $username ne getEggdropUID();
  }
  if (scalar @{$j->{quotes}} == 0) {
    print "not found\n";
  }
}
