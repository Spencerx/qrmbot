#!/usr/bin/perl
#
# 2-clause BSD license.
# Copyright (c) 2021,2022 molo1134@github. All rights reserved.

# https://api.pota.app/park/K-1619
# https://api.pota.app/park/stats/K-1619
# https://api.pota.app/park/leaderboard/K-1619?count=5
# https://api.pota.app/park/activations/K-1619?count=10
# https://api.pota.app/stats/user/N2CX
# https://api.pota.app/profile/N2CX
# https://api.pota.app/locations/US-NJ
# https://api.pota.app/locations
# https://api.pota.app/lookup?search=nockamixon&size=10
# https://api.pota.app/lookup?search=nv3y&size=10

use URI::Escape;
use JSON qw( decode_json );
use strict;
use utf8;
use feature 'unicode_strings';
use Encode qw(decode);
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Util;
use Colors;
use Location;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
my $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

@ARGV = map { decode "utf-8", $_ } @ARGV;

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

our $mylat = undef;
our $mylon = undef;
my $de = undef;
my $term;

my $i = 0;
while ($i <= $#ARGV) {
  if (!defined($de) and $ARGV[$i] =~ /^(--geo|de|from)$/i) {
    $i++;
    $de = $ARGV[$i];
    $i++;
    next;
  }
  if (defined($de)) {
    $de = $de . " " . $ARGV[$i];
    $i++;
    next;
  }

  $term .= " " if defined $term;
  $term .= $ARGV[$i];
  $i++;
}

$term =~ s/[Ã¸Ã˜]/0/g if defined $term;
$term =~ s/^\s*//g if defined $term;
$term =~ s/\s$//g if defined $term;

if (not defined $term or length($term) == 0) {
  if ($username eq getEggdropUID()) {
    print "usage: !pota <search term>\n";
  } else {
    print "usage: $0 <search term>\n";
  }
  exit $exitnonzeroonerror;
}


if (defined($de)) {
  my $degeo = argToCoords($de);
  ($mylat, $mylon) = split(',', $degeo) if defined $degeo;
}

my $search_url = "https://api.pota.app/lookup?size=3&search=" . uri_escape("$term");

#print "$search_url\n";

local $/;   # read entire file -- FIXME: potentially memory hungry
open(JSON, '-|', "curl -k -L --max-time 10 --retry 1 -s '$search_url'");
my $json = <JSON>;
close(JSON);
if (not defined $json or $json eq "") {
  print "no response from $search_url\n";
  exit $exitnonzeroonerror;
}
#print $json, "\n";
my $j = decode_json($json);
my $count = scalar @{$j};
if ($count > 1 and uc @{$j}[0]->{value} ne uc $term) {
  print "found: ";
  print "\n" if $username ne getEggdropUID();
  foreach my $r (@{$j}) {
    print $r->{type}, ": ", $r->{display};
    print "; " if $username eq getEggdropUID();
    print "\n" if $username ne getEggdropUID();
  }
} elsif ($count == 0) {
  print "not found\n";
} elsif ($count == 1 or uc @{$j}[0]->{value} eq uc $term) {
  #print "one\n";
  my $srec = @{$j}[0];
  if (@{$j}[0]->{type} eq "park") {
    #print "park: ", $srec->{display}, " -- TODO\n";
    # TODO
    my $url = "https://api.pota.app/park/" . $srec->{value};

    local $/;   # read entire file -- FIXME: potentially memory hungry
    open(JSON, '-|', "curl -k -L --max-time 10 --retry 1 -s '$url'");
    my $json = <JSON>;
    close(JSON);
    #print $json, "\n";
    my $j = decode_json($json);

    my $url = "https://api.pota.app/park/stats/" . $srec->{value};
    local $/;   # read entire file -- FIXME: potentially memory hungry
    open(JSON, '-|', "curl -k -L --max-time 10 --retry 1 -s '$url'");
    my $json = <JSON>;
    close(JSON);
    #print $json, "\n";
    my $k = undef;
    if ($json eq "[]") {
      $k = {};
      $k->{activations} = 0;
      $k->{contacts} = 0;
    } else {
      $k = decode_json($json);
    }

    my $url = "https://api.pota.app/park/activations/$srec->{value}?count=1";
    local $/;   # read entire file -- FIXME: potentially memory hungry
    open(JSON, '-|', "curl -k -L --max-time 10 --retry 1 -s '$url'");
    my $json = <JSON>;
    close(JSON);
    #print $json, "\n";
    my $l = decode_json($json);
    my $last = undef if scalar @{$l} == 0;
    $last = @{$l}[0] if scalar @{$l} > 0;


    printf "%s - %s (%s): %s; %s, %s -- %s activations (%s QSOs)",
      bold($j->{reference}),
      $j->{name},
      $j->{grid6},
      $j->{parktypeDesc},
      $j->{locationName},
      $j->{entityName},
      $k->{activations},
      commify($k->{contacts});

    if (defined($last)) {
      printf " -- last activation: %s by %s (%s QSOs)",
	$last->{qso_date} =~ s/^(....)(..)(..)$/$1-$2-$3/r,
	$last->{activeCallsign},
	commify($last->{totalQSOs});

      my $url = "https://api.pota.app/park/leaderboard/$srec->{value}?count=3";
      local $/;   # read entire file -- FIXME: potentially memory hungry
      open(JSON, '-|', "curl -k -L --max-time 10 --retry 1 -s '$url'");
      my $json = <JSON>;
      close(JSON);
      #print $json, "\n";
      my $b = decode_json($json);
      my $i = 0;
      print " -- top activators: ";
      foreach my $r (@{$b->{activator_qsos}}) {
	$i++;
	print "; " if $i > 1;
	if ($i == 1) {
	  print yellow("#1 ðŸ¥‡"), ": ", yellow($r->{callsign});
	} elsif ($i == 2) {
	  print lightGrey("#2 ðŸ¥ˆ"), ": ", lightGrey($r->{callsign});
	} elsif ($i == 3) {
	  print darkRed("#3 ðŸ¥‰"), ": ", darkRed($r->{callsign});
	} else {
	  print "#$i: $r->{callsign}";
	}
	print ": ", commify($r->{count}), " QSOs";
      }
    }

    if (defined($mylat)) {
      my ($dist, $bearing) = distBearing($mylat, $mylon, $j->{latitude}, $j->{longitude});
      my $localgrid = coordToGrid($mylat, $mylon);
      printf(" -- %.1f km, %.0fÂ° from %s", $dist, $bearing, $localgrid);
    }
    print "\n";

  } elsif (@{$j}[0]->{type} eq "user") {
    #print "user\n";
    my $url = "https://api.pota.app/profile/" . $srec->{value};

    local $/;   # read entire file -- FIXME: potentially memory hungry
    open(JSON, '-|', "curl -k -L --max-time 10 --retry 1 -s '$url'");
    my $json = <JSON>;
    close(JSON);
    #print $json, "\n";
    if ($json =~ /not found/i) {
      print "error: seemed that we had a user, but no profile\n";
      exit $exitnonzeroonerror;
    }

    my $j = decode_json($json);

    printf "%s - %s%s: %s activations (%s parks, %s QSOs); hunter: %s parks (%s QSOs); %s awards (%s endorsements)",
      bold($j->{callsign}),
      $j->{name},
      (defined $j->{qth} and $j->{qth} ne "" ? (" (" . $j->{qth} . ")") : ""),
      $j->{stats}->{activator}->{activations},
      $j->{stats}->{activator}->{parks},
      commify($j->{stats}->{activator}->{qsos}),
      $j->{stats}->{hunter}->{parks},
      commify($j->{stats}->{hunter}->{qsos}),
      $j->{stats}->{awards},
      $j->{stats}->{endorsements};

    my $act = $j->{recent_activity}->{activations}->[0];
    printf "; last activation: %s: %s \"%s\" (%s) %s QSOs",
      $act->{date},
      $act->{reference},
      $act->{park},
      $act->{location},
      $act->{total}
      if defined $act;
    print "\n";

  } else {
    print "error: unexpected type: ", @{$j}[0]->{type}, "\n";
    exit $exitnonzeroonerror;
  }
} else {
  print "bug\n";
  exit $exitnonzeroonerror;
}
