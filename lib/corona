#!/usr/bin/perl

# coronavirus info for qrmbot
# initial version by aa4jq
# modified by k2cr
#
# 2-clause BSD license.
#
# Copyright (c) 2020 AA4JQ. All rights reserved.
# Copyright (c) 2020, 2021, 2022 molo1134@github. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");
use Encode qw(decode);
use I18N::Langinfo qw(langinfo CODESET);
use JSON qw( decode_json );

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Util;
use Colors;

use Math::Round;
use List::Util qw(sum min max);
use Clone qw(clone);
use POSIX qw(strftime);

# disable "experimental" warning on smart match operator use
no if $] >= 5.018, warnings => "experimental::smartmatch";

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

if ($ARGV[0] =~ /about/i){
  print "Covid19 case counts.  Data sources: https://github.com/CSSEGISandData/COVID-19 https://github.com/nytimes/covid-19-data/ https://github.com/jgehrcke/covid-19-germany-gae https://www.worldometers.info/coronavirus/ https://github.com/owid/covid-19-data/tree/master/public/data/vaccinations https://covid.cdc.gov/covid-data-tracker/#county-view https://www.economist.com/graphic-detail/coronavirus-excess-deaths-estimates\n";

  my @casespercap = ( 1.0, 5.0, 25.0, 38.0, 50.0, 100.0, 325.0 );
  my @deathspercap = ( 1.0, 5.0, 10.0, 50.0, 100.0 );
  my @result = seriesToSparkLine(\@casespercap, 1, 0);
  my @resultd = seriesToSparkLine(\@deathspercap, 3, 0);
  my $min = $result[0];
  my $max = $result[1];
  my @spark = @result[2 .. $#result];
  my @sparkd = @resultd[2 .. $#resultd];
  printf " sparkline colored by per-capita case counts: %s - %s,%s,%s,%s,%s,%s,%s cases per 100k population over 7 days\n", join("", @spark),
    colorByCaseRate("<5", 1),
    colorByCaseRate("5", 5),
    colorByCaseRate("25", 25),
    colorByCaseRate("38", 38),
    colorByCaseRate("50", 50),
    colorByCaseRate("100", 100),
    colorByCaseRate(">325", 325);
  printf " sparkline colored by per-capita death counts: %s - %s,%s,%s,%s,%s deaths per 1mil population over 7 days\n", join("", @sparkd),
    colorByDeathRate("<5", 1),
    colorByDeathRate("5", 5),
    colorByDeathRate("10", 10),
    colorByDeathRate("50", 50),
    colorByDeathRate(">100", 100);


  exit 0;
}

my $args = join(" ", @ARGV);

# decode command line from locale-specified codeset
my $codeset = langinfo(CODESET);
$args = decode($codeset, $args);

# eggdrop doesn't split args on spaces
@ARGV = split(' ', $args);

if ($#ARGV > 5 and $username eq getEggdropUID()) {
  print "fuck off\n";
  exit $exitnonzeroonerror;
}

my @interest;
my @states;

my @statesandterritories = ("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE",
  "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA",
  "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
  "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA",
  "WV", "WI", "WY", "DC", "GU", "AS", "MP", "PR", "VI", "UM", "FM", "MH", "PW",
  "AA", "AE", "AP");

my %stateToName;
$stateToName{US} = "National";
$stateToName{AK} = "Alaska";
$stateToName{AL} = "Alabama";
$stateToName{AR} = "Arkansas";
$stateToName{AZ} = "Arizona";
$stateToName{CA} = "California";
$stateToName{CO} = "Colorado";
$stateToName{CT} = "Connecticut";
$stateToName{DC} = "District of Columbia";
$stateToName{DE} = "Delaware";
$stateToName{FL} = "Florida";
$stateToName{GA} = "Georgia";
$stateToName{HI} = "Hawaii";
$stateToName{IA} = "Iowa";
$stateToName{ID} = "Idaho";
$stateToName{IL} = "Illinois";
$stateToName{IN} = "Indiana";
$stateToName{KS} = "Kansas";
$stateToName{KY} = "Kentucky";
$stateToName{LA} = "Louisiana";
$stateToName{MA} = "Massachusetts";
$stateToName{MD} = "Maryland";
$stateToName{ME} = "Maine";
$stateToName{MI} = "Michigan";
$stateToName{MN} = "Minnesota";
$stateToName{MO} = "Missouri";
$stateToName{MS} = "Mississippi";
$stateToName{MT} = "Montana";
$stateToName{NC} = "North Carolina";
$stateToName{ND} = "North Dakota";
$stateToName{NE} = "Nebraska";
$stateToName{NH} = "New Hampshire";
$stateToName{NJ} = "New Jersey";
$stateToName{NM} = "New Mexico";
$stateToName{NV} = "Nevada";
$stateToName{NY} = "New York";
$stateToName{OH} = "Ohio";
$stateToName{OK} = "Oklahoma";
$stateToName{OR} = "Oregon";
$stateToName{PA} = "Pennsylvania";
$stateToName{RI} = "Rhode Island";
$stateToName{SC} = "South Carolina";
$stateToName{SD} = "South Dakota";
$stateToName{TN} = "Tennessee";
$stateToName{TX} = "Texas";
$stateToName{UT} = "Utah";
$stateToName{VA} = "Virginia";
$stateToName{VT} = "Vermont";
$stateToName{WA} = "Washington";
$stateToName{WI} = "Wisconsin";
$stateToName{WV} = "West Virginia";
$stateToName{WY} = "Wyoming";

$stateToName{PR} = "Puerto Rico";
$stateToName{GU} = "Guam";
$stateToName{VI} = "Virgin Islands";
$stateToName{MP} = "Northern Mariana Islands";

my %statePop;
# 2020 state populations
$statePop{AK} = 736081;
$statePop{AL} = 5030053;
$statePop{AR} = 3013756;
$statePop{AZ} = 7158923;
$statePop{CA} = 39576757;
$statePop{CO} = 5782171;
$statePop{CT} = 3608298;
$statePop{DE} = 990837;
$statePop{FL} = 21570527;
$statePop{GA} = 10725274;
$statePop{HI} = 1460137;
$statePop{IA} = 3192406;
$statePop{ID} = 1841377;
$statePop{IL} = 12822739;
$statePop{IN} = 6790280;
$statePop{KS} = 2940865;
$statePop{KY} = 4509342;
$statePop{LA} = 4661468;
$statePop{MA} = 7033469;
$statePop{MD} = 6185278;
$statePop{ME} = 1363582;
$statePop{MI} = 10084442;
$statePop{MN} = 5709752;
$statePop{MO} = 6160281;
$statePop{MS} = 2963914;
$statePop{MT} = 1085407;
$statePop{NC} = 10453948;
$statePop{ND} = 779702;
$statePop{NE} = 1963333;
$statePop{NH} = 1379089;
$statePop{NJ} = 9294493;
$statePop{NM} = 2120220;
$statePop{NV} = 3108462;
$statePop{NY} = 20215751;
$statePop{OH} = 11808848;
$statePop{OK} = 3963516;
$statePop{OR} = 4241500;
$statePop{PA} = 13011844;
$statePop{RI} = 1098163;
$statePop{SC} = 5124712;
$statePop{SD} = 887770;
$statePop{TN} = 6916897;
$statePop{TX} = 29183290;
$statePop{UT} = 3275252;
$statePop{VA} = 8654542;
$statePop{VT} = 643503;
$statePop{WA} = 7715946;
$statePop{WI} = 5897473;
$statePop{WV} = 1795045;
$statePop{WY} = 577719;

# 2020 census population
$statePop{MP} = 47329;
$statePop{AS} = 49710;
$statePop{VI} = 87146;
$statePop{GU} = 153836;
$statePop{DC} = 689545;
$statePop{PR} = 3285874;

my %countryPop;
my %countryName;
my %economist_name;
# source: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?format=json&per_page=500&date=2020
# see popscrape.pl
$countryPop{EUU} = 447801418;
$countryName{EUU} = "European Union";
$countryPop{WLD} = 7761620146;
$countryName{WLD} = "World";
$countryPop{AFG} = 38928341;
$countryName{AFG} = "Afghanistan";
$countryPop{ALB} = 2837743;
$countryName{ALB} = "Albania";
$countryPop{DZA} = 43851043;
$countryName{DZA} = "Algeria";
$countryPop{ASM} = 55197;
$countryName{ASM} = "American Samoa";
$countryPop{AND} = 77265;
$countryName{AND} = "Andorra";
$countryPop{AGO} = 32866268;
$countryName{AGO} = "Angola";
$countryPop{ATG} = 97928;
$countryName{ATG} = "Antigua and Barbuda";
$countryPop{ARG} = 45376763;
$countryName{ARG} = "Argentina";
$countryPop{ARM} = 2963234;
$countryName{ARM} = "Armenia";
$countryPop{ABW} = 106766;
$countryName{ABW} = "Aruba";
$countryPop{AUS} = 25687041;
$countryName{AUS} = "Australia";
$countryPop{AUT} = 8917205;
$countryName{AUT} = "Austria";
$countryPop{AZE} = 10093121;
$countryName{AZE} = "Azerbaijan";
$countryPop{BHS} = 393248;
$countryName{BHS} = "Bahamas";
$countryPop{BHR} = 1701583;
$countryName{BHR} = "Bahrain";
$countryPop{BGD} = 164689383;
$countryName{BGD} = "Bangladesh";
$countryPop{BRB} = 287371;
$countryName{BRB} = "Barbados";
$countryPop{BLR} = 9379952;
$countryName{BLR} = "Belarus";
$countryPop{BEL} = 11555997;
$countryName{BEL} = "Belgium";
$countryPop{BLZ} = 397621;
$countryName{BLZ} = "Belize";
$countryPop{BEN} = 12123198;
$countryName{BEN} = "Benin";
$countryPop{BMU} = 63903;
$countryName{BMU} = "Bermuda";
$countryPop{BTN} = 771612;
$countryName{BTN} = "Bhutan";
$countryPop{BOL} = 11673029;
$countryName{BOL} = "Bolivia";
$countryPop{BIH} = 3280815;
$countryName{BIH} = "Bosnia and Herzegovina";
$countryPop{BWA} = 2351625;
$countryName{BWA} = "Botswana";
$countryPop{BRA} = 212559409;
$countryName{BRA} = "Brazil";
$countryPop{VGB} = 30237;
$countryName{VGB} = "British Virgin Islands";
$countryPop{BRN} = 437483;
$countryName{BRN} = "Brunei";
$countryPop{BGR} = 6934015;
$countryName{BGR} = "Bulgaria";
$countryPop{BFA} = 20903278;
$countryName{BFA} = "Burkina Faso";
$countryPop{BDI} = 11890781;
$countryName{BDI} = "Burundi";
$countryPop{CPV} = 555988;
$countryName{CPV} = "Cabo Verde";
$countryPop{KHM} = 16718971;
$countryName{KHM} = "Cambodia";
$countryPop{CMR} = 26545864;
$countryName{CMR} = "Cameroon";
$countryPop{CAN} = 38005238;
$countryName{CAN} = "Canada";
$countryPop{CYM} = 65720;
$countryName{CYM} = "Cayman Islands";
$countryPop{CAF} = 4829764;
$countryName{CAF} = "Central African Republic";
$countryPop{TCD} = 16425859;
$countryName{TCD} = "Chad";
$countryPop{CHI} = 173859;
$countryName{CHI} = "Channel Islands";
$countryPop{CHL} = 19116209;
$countryName{CHL} = "Chile";
$countryPop{CHN} = 1410929362;
$countryName{CHN} = "China";
$countryPop{COL} = 50882884;
$countryName{COL} = "Colombia";
$countryPop{COM} = 869595;
$countryName{COM} = "Comoros";
$countryPop{COD} = 89561404;
$countryName{COD} = "Congo (Kinshasa)";
$countryPop{COG} = 5518092;
$countryName{COG} = "Congo (Brazzaville)";
$countryPop{CRI} = 5094114;
$countryName{CRI} = "Costa Rica";
$countryPop{CIV} = 26378275;
$countryName{CIV} = "Cote d'Ivoire";
$countryPop{HRV} = 4047200;
$countryName{HRV} = "Croatia";
$countryPop{CUB} = 11326616;
$countryName{CUB} = "Cuba";
$countryPop{CUW} = 155014;
$countryName{CUW} = "Curacao";
$countryPop{CYP} = 1207361;
$countryName{CYP} = "Cyprus";
$countryPop{CZE} = 10698896;
$countryName{CZE} = "Czechia";
$countryPop{DNK} = 5831404;
$countryName{DNK} = "Denmark";
$countryPop{DJI} = 988002;
$countryName{DJI} = "Djibouti";
$countryPop{DMA} = 71991;
$countryName{DMA} = "Dominica";
$countryPop{DOM} = 10847904;
$countryName{DOM} = "Dominican Republic";
$countryPop{ECU} = 17643060;
$countryName{ECU} = "Ecuador";
$countryPop{EGY} = 102334403;
$countryName{EGY} = "Egypt";
$countryPop{SLV} = 6486201;
$countryName{SLV} = "El Salvador";
$countryPop{GNQ} = 1402985;
$countryName{GNQ} = "Equatorial Guinea";
#$countryPop{ERI} = ;
#$countryName{ERI} = "Eritrea";
$countryPop{EST} = 1331057;
$countryName{EST} = "Estonia";
$countryPop{SWZ} = 1160164;
$countryName{SWZ} = "Eswatini";
$countryPop{ETH} = 114963583;
$countryName{ETH} = "Ethiopia";
$countryPop{FRO} = 48865;
$countryName{FRO} = "Faroe Islands";
$countryPop{FJI} = 896444;
$countryName{FJI} = "Fiji";
$countryPop{FIN} = 5530719;
$countryName{FIN} = "Finland";
$countryPop{FRA} = 67391582;
$countryName{FRA} = "France";
$countryPop{PYF} = 280904;
$countryName{PYF} = "French Polynesia";
$countryPop{GAB} = 2225728;
$countryName{GAB} = "Gabon";
$countryPop{GMB} = 2416664;
$countryName{GMB} = "Gambia";
$countryPop{GEO} = 3714000;
$countryName{GEO} = "Georgia";
$countryPop{DEU} = 83240525;
$countryName{DEU} = "Germany";
$countryPop{GHA} = 31072945;
$countryName{GHA} = "Ghana";
$countryPop{GIB} = 33691;
$countryName{GIB} = "Gibraltar";
$countryPop{GRC} = 10715549;
$countryName{GRC} = "Greece";
$countryPop{GRL} = 56367;
$countryName{GRL} = "Greenland";
$countryPop{GRD} = 112519;
$countryName{GRD} = "Grenada";
$countryPop{GUM} = 168783;
$countryName{GUM} = "Guam";
$countryPop{GTM} = 16858333;
$countryName{GTM} = "Guatemala";
$countryPop{GIN} = 13132792;
$countryName{GIN} = "Guinea";
$countryPop{GNB} = 1967998;
$countryName{GNB} = "Guinea-Bissau";
$countryPop{GUY} = 786559;
$countryName{GUY} = "Guyana";
$countryPop{HTI} = 11402533;
$countryName{HTI} = "Haiti";
$countryPop{HND} = 9904608;
$countryName{HND} = "Honduras";
$countryPop{HKG} = 7481800;
$countryName{HKG} = "Hong Kong";
$countryPop{HUN} = 9749763;
$countryName{HUN} = "Hungary";
$countryPop{ISL} = 366425;
$countryName{ISL} = "Iceland";
$countryPop{IND} = 1380004385;
$countryName{IND} = "India";
$countryPop{IDN} = 273523621;
$countryName{IDN} = "Indonesia";
$countryPop{IRN} = 83992953;
$countryName{IRN} = "Iran";
$countryPop{IRQ} = 40222503;
$countryName{IRQ} = "Iraq";
$countryPop{IRL} = 4994724;
$countryName{IRL} = "Ireland";
$countryPop{IMN} = 85032;
$countryName{IMN} = "Isle of Man";
$countryPop{ISR} = 9216900;
$countryName{ISR} = "Israel";
$countryPop{ITA} = 59554023;
$countryName{ITA} = "Italy";
$countryPop{JAM} = 2961161;
$countryName{JAM} = "Jamaica";
$countryPop{JPN} = 125836021;
$countryName{JPN} = "Japan";
$countryPop{JOR} = 10203140;
$countryName{JOR} = "Jordan";
$countryPop{KAZ} = 18754440;
$countryName{KAZ} = "Kazakhstan";
$countryPop{KEN} = 53771300;
$countryName{KEN} = "Kenya";
$countryPop{KIR} = 119446;
$countryName{KIR} = "Kiribati";
#$countryPop{PRK} = 25778815;
#$countryName{PRK} = "Korea, Dem. People's Rep.";
$countryPop{KOR} = 51780579;
$countryName{KOR} = "Korea";
$countryPop{XKX} = 1775378;
$countryName{XKX} = "Kosovo";
$countryPop{KWT} = 4270563;
$countryName{KWT} = "Kuwait";
$countryPop{KGZ} = 6591600;
$countryName{KGZ} = "Kyrgyzstan";
$countryPop{LAO} = 7275556;
$countryName{LAO} = "Laos";
$countryPop{LVA} = 1901548;
$countryName{LVA} = "Latvia";
$countryPop{LBN} = 6825442;
$countryName{LBN} = "Lebanon";
$countryPop{LSO} = 2142252;
$countryName{LSO} = "Lesotho";
$countryPop{LBR} = 5057677;
$countryName{LBR} = "Liberia";
$countryPop{LBY} = 6871287;
$countryName{LBY} = "Libya";
$countryPop{LIE} = 38137;
$countryName{LIE} = "Liechtenstein";
$countryPop{LTU} = 2794700;
$countryName{LTU} = "Lithuania";
$countryPop{LUX} = 632275;
$countryName{LUX} = "Luxembourg";
$countryPop{MAC} = 649342;
$countryName{MAC} = "Macao";
$countryPop{MDG} = 27691019;
$countryName{MDG} = "Madagascar";
$countryPop{MWI} = 19129955;
$countryName{MWI} = "Malawi";
$countryPop{MYS} = 32365998;
$countryName{MYS} = "Malaysia";
$countryPop{MDV} = 540542;
$countryName{MDV} = "Maldives";
$countryPop{MLI} = 20250834;
$countryName{MLI} = "Mali";
$countryPop{MLT} = 525285;
$countryName{MLT} = "Malta";
$countryPop{MHL} = 59194;
$countryName{MHL} = "Marshall Islands";
$countryPop{MRT} = 4649660;
$countryName{MRT} = "Mauritania";
$countryPop{MUS} = 1265740;
$countryName{MUS} = "Mauritius";
$countryPop{MEX} = 128932753;
$countryName{MEX} = "Mexico";
$countryPop{FSM} = 115021;
$countryName{FSM} = "Micronesia";
$countryPop{MDA} = 2620495;
$countryName{MDA} = "Moldova";
$countryPop{MCO} = 39244;
$countryName{MCO} = "Monaco";
$countryPop{MNG} = 3278292;
$countryName{MNG} = "Mongolia";
$countryPop{MNE} = 621306;
$countryName{MNE} = "Montenegro";
$countryPop{MAR} = 36910558;
$countryName{MAR} = "Morocco";
$countryPop{MOZ} = 31255435;
$countryName{MOZ} = "Mozambique";
$countryPop{MMR} = 54409794;
#$countryName{MMR} = "Myanmar";
$countryName{MMR} = "Burma";
$countryPop{NAM} = 2540916;
$countryName{NAM} = "Namibia";
$countryPop{NRU} = 10834;
$countryName{NRU} = "Nauru";
$countryPop{NPL} = 29136808;
$countryName{NPL} = "Nepal";
$countryPop{NLD} = 17441139;
$countryName{NLD} = "Netherlands";
$countryPop{NCL} = 271960;
$countryName{NCL} = "New Caledonia";
$countryPop{NZL} = 5084300;
$countryName{NZL} = "New Zealand";
$countryPop{NIC} = 6624554;
$countryName{NIC} = "Nicaragua";
$countryPop{NER} = 24206636;
$countryName{NER} = "Niger";
$countryPop{NGA} = 206139587;
$countryName{NGA} = "Nigeria";
$countryPop{MKD} = 2072531;
$countryName{MKD} = "North Macedonia";
$countryPop{MNP} = 57557;
$countryName{MNP} = "Northern Mariana Islands";
$countryPop{NOR} = 5379475;
$countryName{NOR} = "Norway";
$countryPop{OMN} = 5106622;
$countryName{OMN} = "Oman";
$countryPop{PAK} = 220892331;
$countryName{PAK} = "Pakistan";
$countryPop{PLW} = 18092;
$countryName{PLW} = "Palau";
$countryPop{PAN} = 4314768;
$countryName{PAN} = "Panama";
$countryPop{PNG} = 8947027;
$countryName{PNG} = "Papua New Guinea";
$countryPop{PRY} = 7132530;
$countryName{PRY} = "Paraguay";
$countryPop{PER} = 32971846;
$countryName{PER} = "Peru";
$countryPop{PHL} = 109581085;
$countryName{PHL} = "Philippines";
$countryPop{POL} = 37950802;
$countryName{POL} = "Poland";
$countryPop{PRT} = 10305564;
$countryName{PRT} = "Portugal";
$countryPop{PRI} = 3194034;
$countryName{PRI} = "Puerto Rico";
$countryPop{QAT} = 2881060;
$countryName{QAT} = "Qatar";
$countryPop{ROU} = 19286123;
$countryName{ROU} = "Romania";
$countryPop{RUS} = 144104080;
$countryName{RUS} = "Russia";
$countryPop{RWA} = 12952209;
$countryName{RWA} = "Rwanda";
$countryPop{WSM} = 198410;
$countryName{WSM} = "Samoa";
$countryPop{SMR} = 33938;
$countryName{SMR} = "San Marino";
$countryPop{STP} = 219161;
$countryName{STP} = "Sao Tome and Principe";
$countryPop{SAU} = 34813867;
$countryName{SAU} = "Saudi Arabia";
$countryPop{SEN} = 16743930;
$countryName{SEN} = "Senegal";
$countryPop{SRB} = 6908224;
$countryName{SRB} = "Serbia";
$countryPop{SYC} = 98462;
$countryName{SYC} = "Seychelles";
$countryPop{SLE} = 7976985;
$countryName{SLE} = "Sierra Leone";
$countryPop{SGP} = 5685807;
$countryName{SGP} = "Singapore";
$countryPop{SXM} = 40812;
$countryName{SXM} = "Sint Maarten (Dutch part)";
$countryPop{SVK} = 5458827;
$countryName{SVK} = "Slovakia";
$countryPop{SVN} = 2100126;
$countryName{SVN} = "Slovenia";
$countryPop{SLB} = 686878;
$countryName{SLB} = "Solomon Islands";
$countryPop{SOM} = 15893219;
$countryName{SOM} = "Somalia";
$countryPop{ZAF} = 59308690;
$countryName{ZAF} = "South Africa";
$countryPop{SSD} = 11193729;
$countryName{SSD} = "South Sudan";
$countryPop{ESP} = 47351567;
$countryName{ESP} = "Spain";
$countryPop{LKA} = 21919000;
$countryName{LKA} = "Sri Lanka";
$countryPop{KNA} = 53192;
$countryName{KNA} = "Saint Kitts and Nevis";
$countryPop{LCA} = 183629;
$countryName{LCA} = "Saint Lucia";
$countryPop{MAF} = 38659;
$countryName{MAF} = "St. Martin (French part)";
$countryPop{VCT} = 110947;
$countryName{VCT} = "Saint Vincent and the Grenadines";
$countryPop{SDN} = 43849269;
$countryName{SDN} = "Sudan";
$countryPop{SUR} = 586634;
$countryName{SUR} = "Suriname";
$countryPop{SWE} = 10353442;
$countryName{SWE} = "Sweden";
$countryPop{CHE} = 8636896;
$countryName{CHE} = "Switzerland";
$countryPop{SYR} = 17500657;
$countryName{SYR} = "Syria";
$countryPop{TWN} = 23539588;   # added from wikipedia  https://en.wikipedia.org/wiki/Demographics_of_Taiwan#Population
$countryName{TWN} = "Taiwan*"; # added
$countryPop{TJK} = 9537642;
$countryName{TJK} = "Tajikistan";
$countryPop{TZA} = 59734213;
$countryName{TZA} = "Tanzania";
$countryPop{THA} = 69799978;
$countryName{THA} = "Thailand";
$countryPop{TLS} = 1318442;
$countryName{TLS} = "Timor-Leste";
$countryPop{TGO} = 8278737;
$countryName{TGO} = "Togo";
$countryPop{TON} = 105697;
$countryName{TON} = "Tonga";
$countryPop{TTO} = 1399491;
$countryName{TTO} = "Trinidad and Tobago";
$countryPop{TUN} = 11818618;
$countryName{TUN} = "Tunisia";
$countryPop{TUR} = 84339067;
$countryName{TUR} = "Turkey";
$countryPop{TKM} = 6031187;
$countryName{TKM} = "Turkmenistan";
$countryPop{TCA} = 38718;
$countryName{TCA} = "Turks and Caicos Islands";
$countryPop{TUV} = 11792;
$countryName{TUV} = "Tuvalu";
$countryPop{UGA} = 45741000;
$countryName{UGA} = "Uganda";
$countryPop{UKR} = 44134693;
$countryName{UKR} = "Ukraine";
$countryPop{ARE} = 9890400;
$countryName{ARE} = "United Arab Emirates";
$countryPop{GBR} = 67215293;
$countryName{GBR} = "United Kingdom";
$countryPop{USA} = 331108434; # 2020 census
#$countryName{USA} = "United States";
$countryName{USA} = "US";
$countryPop{URY} = 3473727;
$countryName{URY} = "Uruguay";
$countryPop{UZB} = 34232050;
$countryName{UZB} = "Uzbekistan";
$countryPop{VUT} = 307150;
$countryName{VUT} = "Vanuatu";
$countryPop{VEN} = 28435943;
$countryName{VEN} = "Venezuela";
$countryPop{VNM} = 97338583;
$countryName{VNM} = "Vietnam";
$countryPop{VIR} = 106290;
$countryName{VIR} = "Virgin Islands (U.S.)";
$countryPop{PSE} = 4803269;
$countryName{PSE} = "West Bank and Gaza";
$countryPop{ESH} = 567402; # added, wikipedia:  https://en.wikipedia.org/wiki/Western_Sahara
$countryName{ESH} = "Western Sahara"; # added
$countryPop{YEM} = 29825968;
$countryName{YEM} = "Yemen";
$countryPop{ZMB} = 18383956;
$countryName{ZMB} = "Zambia";
$countryPop{ZWE} = 14862927;
$countryName{ZWE} = "Zimbabwe";

#$economist_name{} = "Anguilla";
#$economist_name{} = "Caribbean Netherlands";
$economist_name{BIH} = "Bosnia";
#$economist_name{} = "Ivory Coast";
$economist_name{COD} = "Congo";
$economist_name{COG} = "Congo-Brazzaville";
#$economist_name{} = "Cook Islands";
$economist_name{CPV} = "Cape Verde";
$economist_name{CUW} = "Curaçao";
$economist_name{CZE} = "Czech Republic";
#$economist_name{} = "Eritrea";
#$economist_name{} = "Falkland Islands";
$economist_name{GBR} = "Britain";
#$economist_name{} = "Guernsey";
$economist_name{GMB} = "The Gambia";
#$economist_name{} = "Jersey";
$economist_name{KOR} = "South Korea";
#$economist_name{} = "Macau";
$economist_name{MMR} = "Myanmar";
#$economist_name{} = "Montserrat";
#$economist_name{} = "Niue";
#$economist_name{} = "Pitcairn";
#$economist_name{} = "North Korea";
#$economist_name{} = "Palestinian Territories";
#$economist_name{} = "St. Helena Ascension and Tristan da Cunha";
$economist_name{STP} = "São Tomé and Príncipe";
$economist_name{SXM} = "Sint Maarten";
#$economist_name{} = "Tokelau";
$economist_name{TWN} = "Taiwan";
$economist_name{USA} = "United States";
#$economist_name{} = "Vatican";
$economist_name{VGB} = "Virgin Islands (British)";
#$economist_name{} = "Wallis and Futuna";
$economist_name{EU} = "European Union";


my %needsTotal;
$needsTotal{Australia} = "AUS";
$needsTotal{Canada} = "CAN";
$needsTotal{China} = "CHN";

my %provinceCodes;
$provinceCodes{"Australian Capital Territory"} = "AUS-ACT";
$provinceCodes{"New South Wales"} = "AUS-NSW";
$provinceCodes{"Northern Territory"} = "AUS-NT";
$provinceCodes{"Queensland"} = "AUS-QLD";
$provinceCodes{"South Australia"} = "AUS-SA";
$provinceCodes{"Tasmania"} = "AUS-TAS";
$provinceCodes{"Victoria"} = "AUS-VIC";
$provinceCodes{"Western Australia"} = "AUS-WA";

# june 2021
$countryName{"AUS-NSW"} = "New South Wales";
$countryPop{"AUS-NSW"} = 8189266;
$countryName{"AUS-ACT"} = "Australian Capital Territory";
$countryPop{"AUS-ACT"} = 432266;
$countryName{"AUS-NT"} = "Northern Territory";
$countryPop{"AUS-NT"} = 246338;
$countryName{"AUS-QLD"} = "Queensland";
$countryPop{"AUS-QLD"} = 5221170;
$countryName{"AUS-SA"} = "South Australia";
$countryPop{"AUS-SA"} = 1773243;
$countryName{"AUS-TAS"} = "Tasmania";
$countryPop{"AUS-TAS"} = 541479;
$countryName{"AUS-VIC"} = "Victoria";
$countryPop{"AUS-VIC"} = 6649159;
$countryName{"AUS-WA"} = "Western Australia";
$countryPop{"AUS-WA"} = 2681633;
$countryName{"AUS-JBT"} = "Jervis Bay Territory";
$countryPop{"AUS-JBT"} = 405;

$provinceCodes{"Alberta"} = "CAN-AB";
$provinceCodes{"British Columbia"} = "CAN-BC";
$provinceCodes{"Manitoba"} = "CAN-MB";
$provinceCodes{"New Brunswick"} = "CAN-NB";
$provinceCodes{"Newfoundland and Labrador"} = "CAN-NL";
$provinceCodes{"Northwest Territories"} = "CAN-NW";
$provinceCodes{"Nova Scotia"} = "CAN-NS";
$provinceCodes{"Ontario"} = "CAN-ON";
$provinceCodes{"Prince Edward Island"} = "CAN-PE";
$provinceCodes{"Quebec"} = "CAN-QC";
$provinceCodes{"Saskatchewan"} = "CAN-SK";
$provinceCodes{"Yukon"} = "CAN-YK";

# 2021 Q4 est.
$countryName{"CAN-AB"} = "Alberta";
$countryPop{"CAN-AB"} = 4464170;
$countryName{"CAN-BC"} = "British Columbia";
$countryPop{"CAN-BC"} = 5249635;
$countryName{"CAN-MB"} = "Manitoba";
$countryPop{"CAN-MB"} = 1386333;
$countryName{"CAN-NB"} = "New Brunswick";
$countryPop{"CAN-NB"} = 794300;
$countryName{"CAN-NL"} = "Newfoundland and Labrador";
$countryPop{"CAN-NL"} = 521758;
$countryName{"CAN-NW"} = "Northwest Territories";
$countryPop{"CAN-NW"} = 45515;
$countryName{"CAN-NS"} = "Nova Scotia";
$countryPop{"CAN-NS"} = 998832;
$countryName{"CAN-ON"} = "Ontario";
$countryPop{"CAN-ON"} = 14915270;
$countryName{"CAN-PE"} = "Prince Edward Island";
$countryPop{"CAN-PE"} = 165936;
$countryName{"CAN-QC"} = "Quebec";
$countryPop{"CAN-QC"} = 8631147;
$countryName{"CAN-SK"} = "Saskatchewan";
$countryPop{"CAN-SK"} = 1180867;
$countryName{"CAN-YK"} = "Yukon";
$countryPop{"CAN-YK"} = 43095;

# english and german
$provinceCodes{"Baden-Württemberg"} = "DEU-BW";
$provinceCodes{"Baden-Wurttemberg"} = "DEU-BW";
$provinceCodes{"Baden-Wuerttemberg"} = "DEU-BW";
$provinceCodes{"Bavaria"} = "DEU-BY";
$provinceCodes{"Bayern"} = "DEU-BY";
$provinceCodes{"Berlin"} = "DEU-BE";
$provinceCodes{"Brandenburg"} = "DEU-BB";
$provinceCodes{"Bremen"} = "DEU-HB";
$provinceCodes{"Hamburg"} = "DEU-HH";
$provinceCodes{"Hesse"} = "DEU-HE";
$provinceCodes{"Hessen"} = "DEU-HE";
$provinceCodes{"Lower Saxony"} = "DEU-NI";
$provinceCodes{"Niedersachsen"} = "DEU-NI";
$provinceCodes{"Mecklenburg-Vorpommern"} = "DEU-MV";
$provinceCodes{"North Rhine-Westphalia"} = "DEU-NW";
$provinceCodes{"Nordrhein-Westfalen"} = "DEU-NW";
$provinceCodes{"Rhineland-Palatinate"} = "DEU-RP";
$provinceCodes{"Rheinland-Pfalz"} = "DEU-RP";
$provinceCodes{"Saarland"} = "DEU-SL";
$provinceCodes{"Saxony-Anhalt"} = "DEU-ST";
$provinceCodes{"Sachsen-Anhalt"} = "DEU-ST";
$provinceCodes{"Saxony"} = "DEU-SN";
$provinceCodes{"Sachsen"} = "DEU-SN";
$provinceCodes{"Schleswig-Holstein"} = "DEU-SH";
$provinceCodes{"Thuringia"} = "DEU-TH";
$provinceCodes{"Thuringen"} = "DEU-TH";

# 2020
$countryName{"DEU-BW"} = "Baden-Württemberg";
$countryPop{"DEU-BW"} = 11103043;
$countryName{"DEU-BY"} = "Bavaria";
$countryPop{"DEU-BY"} = 13140183;
$countryName{"DEU-BE"} = "Berlin";
$countryPop{"DEU-BE"} = 3664088;
$countryName{"DEU-BB"} = "Brandenburg";
$countryPop{"DEU-BB"} = 2531071;
$countryName{"DEU-HB"} = "Bremen";
$countryPop{"DEU-HB"} = 680130;
$countryName{"DEU-HH"} = "Hamburg";
$countryPop{"DEU-HH"} = 1852478;
$countryName{"DEU-HE"} = "Hessen";
$countryPop{"DEU-HE"} = 6293154;
$countryName{"DEU-NI"} = "Lower Saxony";
$countryPop{"DEU-NI"} = 8003421;
$countryName{"DEU-MV"} = "Mecklenburg-Vorpommern";
$countryPop{"DEU-MV"} = 1610774;
$countryName{"DEU-NW"} = "North Rhine-Westphalia";
$countryPop{"DEU-NW"} = 17925570;
$countryName{"DEU-RP"} = "Rhineland-Palatinate";
$countryPop{"DEU-RP"} = 4098391;
$countryName{"DEU-SL"} = "Saarland";
$countryPop{"DEU-SL"} = 983991;
$countryName{"DEU-SN"} = "Saxony";
$countryPop{"DEU-SN"} = 4056941;
$countryName{"DEU-ST"} = "Saxony-Anhalt";
$countryPop{"DEU-ST"} = 2180684;
$countryName{"DEU-SH"} = "Schleswig-Holstein";
$countryPop{"DEU-SH"} = 2910875;
$countryName{"DEU-TH"} = "Thuringia";
$countryPop{"DEU-TH"} = 2120237;

# TODO: China

my @countyList;

if ($args =~ m/(County|City|Parish|Cty|Area|Boro)/i) {
  # counties
  foreach my $arg (split(":", $args)) {
    if ($arg =~ m/^\s*([a-z -]*?)\s+(County|City|Parish|Cty|Area|Boro),\s*([a-z ]*?)\s*$/i) {
      my $state = uc $3;
      if ($state ~~ @statesandterritories) {
	$state = $stateToName{$state};
      }
      push @countyList, "$1;$state";
    }
  }
} else {
  my $i = 0;
  while ($i <= $#ARGV) {
    if ($ARGV[$i] =~ /^[A-Z][A-Z]$/i and uc $ARGV[$i] ~~ @statesandterritories) {
      push @states, uc $ARGV[$i];
    } elsif ($ARGV[$i] =~ /^NYC$/i) {
      push @countyList, "New York City;New York";
    } else {
      push @interest, $ARGV[$i];
    }
    $i++;
  }
}

# countries, foreign states
if ($#interest >= 0) {

  # CASES
  my $url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv";
  local $/;   # read entire file -- FIXME: potentially memory hungry
  open (CSV, '-|', "curl --max-time 10 -s -k -L '$url'");
  my $csv = <CSV>;
  close(CSV);

  my %countrySeries;
  my @countryDataList;

  $csv =~ s/"Korea, South"/Korea/;
  $csv =~ s/Bonaire, Sint/Bonaire Sint/;

  foreach my $line (split /\n/, $csv) {
    next if $line =~ /^Province/; # header
    my @fields = split /,/, $line;

    next if $fields[0] ne "" and not defined $needsTotal{$fields[1]}; # ignore states/provinces for now TODO

    if ($fields[0] eq "") {
      foreach my $iso (keys %countryName) {
	if ($countryName{$iso} eq $fields[1]) {
	  my @cases = @fields[4 .. $#fields];
	  $countrySeries{$iso} = clone(\@cases);
	  push @countryDataList, $fields[1];
	}
      }
    } else {

      my $province = $fields[0];

      push @countryDataList, $fields[0];

      if (defined $needsTotal{$fields[1]}) {
	my @provinceCases = @fields[4 .. $#fields];
	my $provincecode = $provinceCodes{$fields[0]};
	$countrySeries{$provincecode} = clone(\@provinceCases);

	my $iso = $needsTotal{$fields[1]};
	if (not defined $countrySeries{$iso}) {
	  $countrySeries{$iso} = clone(\@provinceCases);
	  push @countryDataList, $fields[1];
	} else {
	  my @prevData = @{clone($countrySeries{$iso})};
	  for (my $n = 0; $n <= $#provinceCases ; $n++) {
	    $prevData[$n] = $prevData[$n] + $provinceCases[$n];
	  }
	  $countrySeries{$iso} = clone(\@prevData);
	}
      }
    }
  }

  # DEATHS
  my $url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv";
  local $/;   # read entire file -- FIXME: potentially memory hungry
  open (CSV, '-|', "curl --max-time 10 -s -k -L '$url'");
  my $csv = <CSV>;
  close(CSV);

  my %countryDeathSeries;
  my @countryDeathDataList;

  $csv =~ s/"Korea, South"/Korea/;
  $csv =~ s/Bonaire, Sint/Bonaire Sint/;

  foreach my $line (split /\n/, $csv) {
    next if $line =~ /^Province/; # header
    my @fields = split /,/, $line;

    next if $fields[0] ne "" and not defined $needsTotal{$fields[1]}; # ignore states/provinces for now TODO

    if ($fields[0] eq "") {
      foreach my $iso (keys %countryName) {
	if ($countryName{$iso} eq $fields[1]) {
	  my @deaths = @fields[4 .. $#fields];
	  $countryDeathSeries{$iso} = clone(\@deaths);
	  push @countryDeathDataList, $fields[1];
	}
      }
    } else {
      my $province = $fields[0];

      push @countryDeathDataList, $fields[0];

      if (defined $needsTotal{$fields[1]}) {
	my @provinceDeaths = @fields[4 .. $#fields];
	my $provincecode = $provinceCodes{$fields[0]};
	$countryDeathSeries{$provincecode} = clone(\@provinceDeaths);

	my $iso = $needsTotal{$fields[1]};
	if (not defined $countryDeathSeries{$iso}) {
	  $countryDeathSeries{$iso} = clone(\@provinceDeaths);
	  push @countryDeathDataList, $fields[1];
	} else {
	  my @prevData = @{clone($countryDeathSeries{$iso})};
	  for (my $n = 0; $n <= $#provinceDeaths ; $n++) {
	    $prevData[$n] = $prevData[$n] + $provinceDeaths[$n];
	  }
	  $countryDeathSeries{$iso} = clone(\@prevData);
	}
      }
    }
  }

  # add german state data - cases
  # TODO: be smarter about when to get this data
  my $url = "https://raw.githubusercontent.com/jgehrcke/covid-19-germany-gae/master/cases-rki-by-state.csv";
  my %posmap;
  my %statemap;
  local $/ = "\n";   # read by line
  open (CSV, '-|', "curl --max-time 10 -s -k -L '$url'");
  while (<CSV>) {
    s/,DE-/,DEU-/g if /^time_iso/;
    my @row = split /,/;
    if (/^time_iso/) { # header row
      for (my $n = 0; $n <= $#row; $n++) {
	#print "$n: $row[$n]\n";
	$posmap{$n} = $row[$n];
	$statemap{$row[$n]} = $n;
      }
    } else {
      for (my $n = 1; $n <= $#row; $n++) {
	if (not defined $countrySeries{$posmap{$n}}) {
	  my @cases = ( $row[$n] );
	  $countrySeries{$posmap{$n}} = clone(\@cases);
	  push @countryDataList, $countryName{$posmap{$n}};
	} else {
	  my @prevData = @{clone($countrySeries{$posmap{$n}})};
	  push @prevData, $row[$n];
	  $countrySeries{$posmap{$n}} = clone(\@prevData);
	}
      }
    }
  }
  close(CSV);

  # add german state data - DEATHS
  # TODO: be smarter about when to get this data
  my $url = "https://raw.githubusercontent.com/jgehrcke/covid-19-germany-gae/master/deaths-rki-by-state.csv";
  my %posmap;
  my %statemap;
  local $/ = "\n";   # read by line
  open (CSV, '-|', "curl --max-time 10 -s -k -L '$url'");
  while (<CSV>) {
    s/,DE-/,DEU-/g if /^time_iso/;
    my @row = split /,/;
    if (/^time_iso/) { # header row
      for (my $n = 0; $n <= $#row; $n++) {
	#print "$n: $row[$n]\n";
	$posmap{$n} = $row[$n];
	$statemap{$row[$n]} = $n;
      }
    } else {
      for (my $n = 1; $n <= $#row; $n++) {
	if (not defined $countryDeathSeries{$posmap{$n}}) {
	  my @deaths = ( $row[$n] );
	  $countryDeathSeries{$posmap{$n}} = clone(\@deaths);
	  push @countryDeathDataList, $countryName{$posmap{$n}};
	} else {
	  my @prevData = @{clone($countryDeathSeries{$posmap{$n}})};
	  push @prevData, $row[$n];
	  $countryDeathSeries{$posmap{$n}} = clone(\@prevData);
	}
      }
    }
  }
  close(CSV);

  # vaccinations per country
  $url = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv";
  my %peopleVax;
  my %peopleFullVax;
  my %lastVax;
  my %lastFullVax;
  my %lastBooster;

  open(CSV, '-|', "curl --max-time 10 -s -k '$url'");
  binmode(CSV, ":utf8");
  while (<CSV>) {
    chomp;

    my (undef, $vax_iso_cc, $date, undef, $ppl_vax, $ppl_full_vax, $total_boosters) = split /,/;

    next if $vax_iso_cc eq "iso_code"; #header row

    #normalize
    $ppl_vax = 0 if not defined $ppl_vax;
    $ppl_full_vax = 0 if not defined $ppl_full_vax;
    $ppl_vax = $lastVax{$vax_iso_cc} if $ppl_vax == 0 and defined $lastVax{$vax_iso_cc};
    $ppl_full_vax = $lastFullVax{$vax_iso_cc} if $ppl_full_vax == 0 and defined $lastFullVax{$vax_iso_cc};

    $lastVax{$vax_iso_cc} = $ppl_vax if $ppl_vax > 0;
    $lastFullVax{$vax_iso_cc} = $ppl_full_vax if $ppl_full_vax > 0;
    $lastBooster{$vax_iso_cc} = $total_boosters if $total_boosters > 0;

    $peopleVax{"${vax_iso_cc}_${date}"} = $ppl_vax;
    $peopleFullVax{"${vax_iso_cc}_${date}"} = $ppl_full_vax;
    #  print "$vax_iso_cc $date $ppl_vax $ppl_full_vax\n";
  }
  close(CSV);

  # get excess death estimate from The Economist
  $url = "https://raw.githubusercontent.com/TheEconomist/covid-19-the-economist-global-excess-deaths-model/main/output-data/output-for-interactive/by_location_per_100k_cumulative.csv";

  open(CSV, '-|', "curl --max-time 10 -s -k '$url'");
  binmode(CSV, ":utf8");
  my %excess_deaths_per100k;
  while (<CSV>) {
    chomp;
    s/"Caribbean Netherlands \(Bonaire, Sint Eustatius and Saba\)"/Caribbean Netherlands/;
    my ($cname, $date, $est, undef, undef, undef, undef, $official) = split /,/;
    $excess_deaths_per100k{$cname} = join(',', ($date, $est, $official));
    #print "$cname => ($date, $est, $official)\n";
  }
  close(CSV);

  foreach my $i (@interest) {
    my @cases = undef;
    my @deaths = undef;
    my @vax = undef;
    my @fullVax = undef;
    my $match = undef;
    my $searchname = $i;
    my $isocode = undef;

    $i = "GBR" if $i eq "UK";

    if (defined $countryName{uc $i}) {
      $searchname = $countryName{uc $i};
      $isocode = uc $i;
    }

    if ($searchname ~~ @countryDataList) {
      $match = $searchname;
    } else {
      foreach my $ctry (@countryDataList) {
	if (lc $searchname eq lc $ctry or (length $searchname > 3 and $ctry =~ m/$searchname/i )) {
	  $match = $ctry;
	  last;
	}
      }
      foreach my $prov (keys %provinceCodes) {
	if (lc $searchname eq lc $prov) {
	  $match = $prov;
	  $isocode = $provinceCodes{$prov};
	  last;
	}
      }
      if (not defined $match) {
	foreach my $prov (keys %provinceCodes) {
	  if (length $searchname > 3 and $prov =~ m/$searchname/i) {
	    $match = $prov;
	    $isocode = $provinceCodes{$prov};
	    last;
	  }
	}
      }
    }

    if (not defined $match) {
      print "not found: $i\n";
      next;
    }
    if (not defined $isocode) {
      foreach my $k (keys %countryName) {
	if ($countryName{$k} eq $match) {
	  $isocode = $k;
	}
      }
    }
    #print "$isocode\n";
    #print "$match\n";
    if (not defined $isocode or $isocode eq "") {
      print "not found: $searchname\n";
      last;
    }

    @cases = @{$countrySeries{$isocode}};
    @deaths = @{$countryDeathSeries{$isocode}};

    foreach my $k (sort keys %peopleVax) {
      if (rindex($k, $isocode, 0) == 0) { # if $k startswith $isocode
	#print "$isocode: $k $peopleVax{$k}\n";
	push @vax, $peopleVax{$k};
	push @fullVax, $peopleFullVax{$k};
      }
    }

    #cases
    my $sum = 0;
    my @weeklyCasesPerCap;
    for (my $n = $#cases; $n > 0; $n--) {
      my $delta = 0;
      $delta = $cases[$n] - $cases[$n-1];
      $sum += $delta;
      #print "$sum\n";
      if ($n < $#cases and ($#cases - $n) % 7 == 6) {
	my $rate = $sum / ($countryPop{$isocode} / 100000.0);
	#print "$sum -> $rate\n";
	unshift(@weeklyCasesPerCap, $rate);   # insert at front
	$sum = 0;
      }
    }
    if ($sum > 0) {  # any leftover
      unshift(@weeklyCasesPerCap, $sum / ($countryPop{$isocode} / 100000.0));
      $sum = 0;
    }

    # deaths
    $sum = 0;
    my @weeklyDeathsPerCap;
    for (my $n = $#deaths; $n > 0; $n--) {
      my $delta = 0;
      $delta = $deaths[$n] - $deaths[$n-1];
      $sum += $delta;
      #print "$sum\n";
      if ($n < $#deaths and ($#deaths - $n) % 7 == 6) {
	my $rate = $sum / ($countryPop{$isocode} / 1000000.0);
	#print "$sum -> $rate\n";
	unshift(@weeklyDeathsPerCap, $rate);   # insert at front
	$sum = 0;
      }
    }
    if ($sum > 0) {  # any leftover
      unshift(@weeklyDeathsPerCap, $sum / ($countryPop{$isocode} / 1000000.0));
      $sum = 0;
    }

    # cases
    my @last52weeks = @weeklyCasesPerCap[$#weeklyCasesPerCap-52 .. $#weeklyCasesPerCap];
    my @result = seriesToSparkLine(\@last52weeks, 1, 0);
    my $min = $result[0];
    my $max = $result[1];
    my @spark = @result[2 .. $#result];
    my $sparkline = optimizeIrcColor(join("", @spark));
    printf "%s cases  weekly chart: %s: max %s weekly cases per 100k pop in last 52 weeks\n", $isocode, $sparkline, colorByCaseRate(sprintf("%0.1f", $max), $max);

    # deaths
    @last52weeks = @weeklyDeathsPerCap[$#weeklyDeathsPerCap-52 .. $#weeklyDeathsPerCap];
    @result = seriesToSparkLine(\@last52weeks, 3, 0);
    $min = $result[0];
    $max = $result[1];
    @spark = @result[2 .. $#result];
    $sparkline = optimizeIrcColor(join("", @spark));
    printf "%s deaths weekly chart: %s: max %s weekly deaths per 1mil pop in last 52 weeks\n", $isocode, $sparkline, colorByDeathRate(sprintf("%0.1f", $max), $max);

    # cases
    my @last31cases = @cases[$#cases-31 .. $#cases];
    my @last30caseDeltas;
    my @last30caseDeltasPerCap;
    for (my $i = 1; $i <= $#last31cases; $i++) {
      $last30caseDeltas[$i-1] = $last31cases[$i] - $last31cases[$i - 1];
      $last30caseDeltasPerCap[$i-1] = $last30caseDeltas[$i-1] / ($countryPop{$isocode} / 100000.0);
    }

    #@result = seriesToSparkLine(\@last30caseDeltas, 0, 0);  # ignored
    my $dailyCaseMin = min(@last30caseDeltas);
    my $dailyCaseMax = max(@last30caseDeltas);

    @result = seriesToSparkLine(\@last30caseDeltasPerCap, 1, 1);
    $min = $result[0];
    $max = $result[1];
    @spark = @result[2 .. $#result];
    $sparkline = optimizeIrcColor(join("", @spark));
    printf "%s cases  last 30d: %s: %s-%s daily new cases", $isocode, $sparkline, commify($dailyCaseMin), commify($dailyCaseMax);

    my $sevenDayTotal = sum(@last30caseDeltas[$#last30caseDeltas-6 .. $#last30caseDeltas]);
    my $sevenDayPerCap = $sevenDayTotal / ($countryPop{$isocode} / 100000.0);
    printf("; %s total for last 7d (%s per 100k over 7d)\n", commify($sevenDayTotal), colorByCaseRate(sprintf("%0.1f", $sevenDayPerCap), $sevenDayPerCap));

    # deaths
    my @last31deaths = @deaths[$#deaths-31 .. $#deaths];
    my @last30deathDeltas;
    my @last30deathDeltasPerCap;
    for (my $i = 1; $i <= $#last31deaths; $i++) {
      $last30deathDeltas[$i-1] = $last31deaths[$i] - $last31deaths[$i - 1];
      $last30deathDeltasPerCap[$i-1] = $last30deathDeltas[$i-1] / ($countryPop{$isocode} / 1000000.0);
    }

    #@result = seriesToSparkLine(\@last30deathDeltas, 0, 0);  # ignored
    my $dailyDeathMin = min(@last30deathDeltas);
    my $dailyDeathMax = max(@last30deathDeltas);

    @result = seriesToSparkLine(\@last30deathDeltasPerCap, 3, 1);
    $min = $result[0];
    $max = $result[1];
    @spark = @result[2 .. $#result];
    $sparkline = optimizeIrcColor(join("", @spark));
    printf "%s deaths last 30d: %s: %s-%s daily new deaths", $isocode, $sparkline, commify($dailyDeathMin), commify($dailyDeathMax);

    my $sevenDayTotal = sum(@last30deathDeltas[$#last30deathDeltas-6 .. $#last30deathDeltas]);
    my $sevenDayPerCap = $sevenDayTotal / ($countryPop{$isocode} / 1000000.0);
    printf("; %s total for last 7d (%s per 1mil over 7d)\n", commify($sevenDayTotal), colorByDeathRate(sprintf("%0.1f", $sevenDayPerCap), $sevenDayPerCap));

    #vaccinations
    my $ptlvaxpct = "unknown";
    if ($#vax > 0) {
      # daily initial vaccinations - per country
      #my @last31vax;
      #if ($#vax > 31) {
      #	@last31vax = @vax[$#vax-31 .. $#vax];
      #} else {
      #	@last31vax = @vax[0 .. $#vax];
      #}
      #my @last30vaxDeltas;
      #for (my $i = 1; $i <= $#last31vax; $i++) {
      #	$last30vaxDeltas[$i-1] = $last31vax[$i] - $last31vax[$i - 1];
      #	$last30vaxDeltas[$i-1] = 0 if not defined $last31vax[$i] or not defined $last31vax[$i-1];
      #}

      #my $dailyVaxMin = min(@last30vaxDeltas);
      #my $dailyVaxMax = max(@last30vaxDeltas);

      #my $sum = 0;
      #for (my $i = 6; $i >= 0; $i--) {
      #	$sum += $last30vaxDeltas[$#last30vaxDeltas-$i];
      #}
      #my $avg = round($sum / 7.0);
      #print "$sum - avg: $avg new vax/day\n";
      #my $percap = $sum / ($countryPop{$isocode} / 100000.0);
      my $popvax = ($vax[$#vax] / $countryPop{$isocode}) * 100.0;

      #@result = seriesToSparkLine(\@last30vaxDeltas, 0, 0);
      #$min = $result[0];
      #$max = $result[1];
      #@spark = @result[2 .. $#result];
      #printf "%s ppl newly vaxxed last 30d: %s: %s-%s daily (avg %s/day in last 7d); %s weekly newly vaxxed per 100k pop; %s of pop. partially vaxxed\n", $isocode, join("", @spark), commify($dailyVaxMin), commify($dailyVaxMax), commify($avg), bold(commify(sprintf("%0.1f", $percap))), bold(sprintf("%0.1f%%", $popvax));
      #printf "%s avg newly vaxxed %s/day in last 7d; %s weekly newly vaxxed per 100k pop; %s of pop. partially vaxxed\n", $isocode, commify($avg), bold(commify(sprintf("%0.1f", $percap))), bold(sprintf("%0.1f%%", $popvax));
      $ptlvaxpct = bold(sprintf("%0.1f%%", $popvax));
    }

    my $fulvaxpct = "unknown";
    if ($#fullVax > 0) {
      # daily full vaccinations - per country
      #my @last31vax;
      #if ($#vax > 31) {
      #	@last31vax = @fullVax[$#fullVax-31 .. $#fullVax];
      #} else {
      #	@last31vax = @fullVax[0 .. $#fullVax];
      #}
      #my @last30vaxDeltas;
      #for (my $i = 1; $i <= $#last31vax; $i++) {
      #	$last30vaxDeltas[$i-1] = $last31vax[$i] - $last31vax[$i - 1];
      #	$last30vaxDeltas[$i-1] = 0 if not defined $last31vax[$i] or not defined $last31vax[$i-1];
      #}

      #my $dailyVaxMin = min(@last30vaxDeltas);
      #my $dailyVaxMax = max(@last30vaxDeltas);

      #$sum = 0;
      #for (my $i = 6; $i >= 0; $i--) {
      #	$sum += $last30vaxDeltas[$#last30vaxDeltas-$i];
      #}
      #my $avg = round($sum / 7.0);
      #print "$sum - avg: $avg new vax/day\n";
      #my $percap = $sum / ($countryPop{$isocode} / 100000.0);
      my $popvax = ($fullVax[$#fullVax] / $countryPop{$isocode}) * 100.0;

      #@result = seriesToSparkLine(\@last30vaxDeltas, 0, 0);
      #$min = $result[0];
      #$max = $result[1];
      #@spark = @result[2 .. $#result];
      #printf "%s ppl fully vaxxed last 30d: %s: %s-%s daily (avg %s/day in last 7d); %s weekly fully vaxxed per 100k pop; %s of pop. fully vaxxed\n", $isocode, join("", @spark), commify($dailyVaxMin), commify($dailyVaxMax), commify($avg), bold(commify(sprintf("%0.1f", $percap))), bold(sprintf("%0.1f%%", $popvax));
      #printf "%s avg fully vaxxed %s/day in last 7d; %s weekly fully vaxxed per 100k pop; %s of pop. fully vaxxed\n", $isocode, commify($avg), bold(commify(sprintf("%0.1f", $percap))), bold(sprintf("%0.1f%%", $popvax));

      $fulvaxpct = bold(sprintf("%0.1f%%", $popvax));
    }
    my $boostpct = "unknown";
    if ($lastBooster{$isocode} > 0) {
      my $popboost = ($lastBooster{$isocode} / $countryPop{$isocode}) * 100.0;
      $boostpct = bold(sprintf("%0.1f%%", $popboost));
    }
    print("$isocode total pop. vaxxed: $ptlvaxpct partial, $fulvaxpct full, $boostpct boosted\n")
      if $ptlvaxpct ne "unknown" or $fulvaxpct ne "unknown" or $boostpct ne "unknown";

    my $key = $countryName{$isocode};
    $key = $economist_name{$isocode} if not defined $excess_deaths_per100k{$key};
    #print "$isocode $countryName{$isocode} $excess_deaths_per100k{$key}\n";
    if (defined $key and defined $excess_deaths_per100k{$key}) {
      my ($date, $est, $official) = split /,/, $excess_deaths_per100k{$key};

      if (defined $est and $est > 0.0 and (not defined $official or (defined $official and $official eq "NA"))) {
	# estimate, no official
	print $isocode, " est. ", bold(nearest(0.1, $est)), " excess deaths per 100k pop";
	print "; est. total ", bold(humanNum(($countryPop{$isocode} / 100000.0) * $est) . " deaths"), "\n";
      } elsif (defined $est and $est > 0.0 and defined $official and $official ne "NA" and $est > $official) {
	# estimate > official
	print $isocode, " est. ", bold(nearest(0.1, $est)), " excess deaths per 100k pop";
	print " (", nearest(0.1, $est/$official), "x official death rate)";
	print "; est. total ", bold(humanNum(round(($countryPop{$isocode} / 100000.0) * $est)) . " deaths"), "\n";
      } elsif (defined $est and $est > 0.0 and defined $official and $official ne "NA" and $est < $official) {
	# estimate < official
	print $isocode, " official deaths ", bold(nearest(0.1, $official)), " per 100k pop";
	print "; official total ", bold(humanNum(round(($countryPop{$isocode} / 100000.0) * $official)) . " deaths"), "\n";
      }
      # no estimate, no official -- fall through
    }
  }
}

# states
if ($#states >= 0) {
  my @names;
  foreach my $s (@states) {
    push @names, $stateToName{$s};
  }

  my %caseTotals;
  my %deathTotals;
  my %peopleVax;
  my %peopleFullVax;

  my $prevCases = undef;
  my $prevDeaths = undef;
  my $last = 0; #debug

  my $url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv";
  open(CSV, '-|', "curl --max-time 10 -s -k '$url'");
  binmode(CSV, ":utf8");
  while (<CSV>) {
    chomp;
    my ($date, $state, $fips, $cases, $deaths) = split /,/;
    if ($state ~~ @names) {
      $caseTotals{"${state}_${date}"} = $cases;
      $deathTotals{"${state}_${date}"} = $deaths;
      #print "${state}_${date} = ", $cases - $last, "\n";
      $last = $cases;
    }
  }
  close(CSV);

  # vaccinations per state
  $url = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv";
  open(CSV, '-|', "curl --max-time 10 -s -k '$url'");
  binmode(CSV, ":utf8");
  my %lastVax;
  my %lastFullVax;
  my %lastBooster;
  while (<CSV>) {
    chomp;
    my ($date, $place, undef, undef, $ppl_vax, undef, undef, $ppl_full_vax, undef, undef, undef, undef, undef, undef, $total_boosters) = split /,/;
    $place =~ s/New York State/New York/;

    #normalize
    $ppl_vax = 0 if not defined $ppl_vax;
    $ppl_full_vax = 0 if not defined $ppl_full_vax;
    $ppl_vax = $lastVax{$place} if $ppl_vax == 0 and defined $lastVax{$place};
    $ppl_full_vax = $lastFullVax{$place} if $ppl_full_vax == 0 and defined $lastFullVax{$place};

    $lastVax{$place} = $ppl_vax if $ppl_vax > 0;
    $lastFullVax{$place} = $ppl_full_vax if $ppl_full_vax > 0;
    $lastBooster{$place} = $total_boosters if $total_boosters > 0;

    if ($place ~~ @names) {
      $peopleVax{"${place}_${date}"} = $ppl_vax;
      $peopleFullVax{"${place}_${date}"} = $ppl_full_vax;
      #print "$place $date $ppl_vax $ppl_full_vax\n";
    }
  }
  close(CSV);

  foreach my $s (@states) {
    my $n = $stateToName{$s};
    my @cases = undef;
    my @deaths = undef;
    my @vax = undef;
    my @fullVax = undef;
    my ($lastVax, $lastFullVax);
    foreach my $k (sort keys %caseTotals) {
      if (rindex($k, $n, 0) == 0) { # if $k startswith $n
	push @cases, $caseTotals{$k};
	push @deaths, $deathTotals{$k};

	#print "$n: $k $peopleVax{$k}\n";
	if (defined $peopleVax{$k} and length($peopleVax{$k} > 0)) {
	  push @vax, $peopleVax{$k};
	  $lastVax = $peopleVax{$k};
	} else {
	  push @vax, $lastVax;
	}

	#print "$n: $k $peopleFullVax{$k}\n";
	if (defined $peopleFullVax{$k} and length($peopleFullVax{$k} > 0)) {
	  push @fullVax, $peopleFullVax{$k};
	  $lastFullVax = $peopleFullVax{$k};
	} else {
	  push @fullVax, $lastFullVax;
	}

      }
    }

    if ($#cases == 0) {
      print "$s not found\n";
      next;
    }

    my $sum = 0;
    my @weeklyCasesPerCap;
    for (my $n = $#cases; $n > 0; $n--) {
      my $delta = 0;
      $delta = $cases[$n] - $cases[$n-1];
      $sum += $delta;
      #print "$sum\n";
      if ($n < $#cases and ($#cases - $n) % 7 == 6) {
	my $rate = $sum / ($statePop{$s} / 100000.0);
	#print "$sum -> $rate\n";
	unshift(@weeklyCasesPerCap, $rate);   # insert at front
	$sum = 0;
      }
    }
    if ($sum > 0) {  # any leftover
      unshift(@weeklyCasesPerCap, $sum / ($statePop{$s} / 100000.0));
      $sum = 0;
    }

    my @weeklyDeathsPerCap;
    for (my $n = $#deaths; $n > 0; $n--) {
      my $delta = 0;
      $delta = $deaths[$n] - $deaths[$n-1];
      $sum += $delta;
      #print "$sum\n";
      if ($n < $#deaths and ($#deaths - $n) % 7 == 6) {
	my $rate = $sum / ($statePop{$s} / 1000000.0);
	#print "$sum -> $rate\n";
	unshift(@weeklyDeathsPerCap, $rate);   # insert at front
	$sum = 0;
      }
    }
    if ($sum > 0) {  # any leftover
      unshift(@weeklyDeathsPerCap, $sum / ($statePop{$s} / 1000000.0));
      $sum = 0;
    }

    my @last52weeksCases = @weeklyCasesPerCap[$#weeklyCasesPerCap-52 .. $#weeklyCasesPerCap];
    my @result = seriesToSparkLine(\@last52weeksCases, 1, 0);
    my $min = $result[0];
    my $max = $result[1];
    my @spark = @result[2 .. $#result];
    my $sparkline = optimizeIrcColor(join("", @spark));
    printf "%s cases  weekly chart: %s: max %s weekly cases per 100k pop in last 52 weeks\n", $s, $sparkline, colorByCaseRate(sprintf("%0.1f", $max), $max);


    my @last52weeksDeaths = @weeklyDeathsPerCap[$#weeklyDeathsPerCap-52 .. $#weeklyDeathsPerCap];
    @result = seriesToSparkLine(\@last52weeksDeaths, 3, 0);
    $min = $result[0];
    $max = $result[1];
    @spark = @result[2 .. $#result];
    $sparkline = optimizeIrcColor(join("", @spark));
    printf "%s deaths weekly chart: %s: max %s weekly deaths per 1mil pop in last 52 weeks\n", $s, $sparkline, colorByDeathRate(sprintf("%0.1f", $max), $max);


    my @last31cases = @cases[$#cases-31 .. $#cases];
    my @last30caseDeltas;
    my @last30caseDeltasPerCap;
    for (my $i = 1; $i <= $#last31cases; $i++) {
      $last30caseDeltas[$i-1] = $last31cases[$i] - $last31cases[$i - 1];
      $last30caseDeltasPerCap[$i-1] = $last30caseDeltas[$i-1] / ($statePop{$s} / 100000.0);
    }

    my $dailyCaseMin = min(@last30caseDeltas);
    my $dailyCaseMax = max(@last30caseDeltas);

    @result = seriesToSparkLine(\@last30caseDeltasPerCap, 1, 1);
    $min = $result[0];
    $max = $result[1];
    @spark = @result[2 .. $#result];
    $sparkline = optimizeIrcColor(join("", @spark));

    printf "%s cases  last 30d: %s: %s-%s daily new cases", $s, $sparkline, commify($dailyCaseMin), commify($dailyCaseMax);

    my $sevenDayTotal = sum(@last30caseDeltas[$#last30caseDeltas-6 .. $#last30caseDeltas]);
    my $sevenDayPerCap = $sevenDayTotal / ($statePop{$s} / 100000.0);
    printf("; %s total for last 7d (%s per 100k over 7d)\n", commify($sevenDayTotal), colorByCaseRate(sprintf("%0.1f", $sevenDayPerCap), $sevenDayPerCap));

    my @last31deaths = @deaths[$#deaths-31 .. $#deaths];
    my @last30deathDeltas;
    my @last30deathDeltasPerCap;
    for (my $i = 1; $i <= $#last31deaths; $i++) {
      $last30deathDeltas[$i-1] = $last31deaths[$i] - $last31deaths[$i - 1];
      $last30deathDeltasPerCap[$i-1] = $last30deathDeltas[$i-1] / ($statePop{$s} / 1000000.0);
    }

    my $dailyDeathMin = min(@last30deathDeltas);
    my $dailyDeathMax = max(@last30deathDeltas);

    @result = seriesToSparkLine(\@last30deathDeltasPerCap, 3, 1);
    $min = $result[0];
    $max = $result[1];
    @spark = @result[2 .. $#result];
    $sparkline = optimizeIrcColor(join("", @spark));

    printf "%s deaths last 30d: %s: %s-%s daily new deaths", $s, $sparkline, commify($dailyDeathMin), commify($dailyDeathMax);

    my $sevenDayTotal = sum(@last30deathDeltas[$#last30deathDeltas-6 .. $#last30deathDeltas]);
    my $sevenDayPerCap = $sevenDayTotal / ($statePop{$s} / 1000000.0);
    printf("; %s total for last 7d (%s per 1mil over 7d)\n", commify($sevenDayTotal), colorByDeathRate(sprintf("%0.1f", $sevenDayPerCap), $sevenDayPerCap));


    # compute weekly percent positives
    ## FIXME not used currently
    my $url = "https://api.covidtracking.com/v1/states/" . lc $s. "/daily.csv";
    my $positiveDeltaPosition = -1;
    my $testDeltaPosition = -1;
    my @dailyPctPositives;
    my %dailyNewPositives;
    my %dailyNewTests;
    open(CSV, '-|', "curl --max-time 10 -s -k '$url'");
    binmode(CSV, ":utf8");
    while (<CSV>) {
      chomp;
      my @row = split /,/;
      if (/^date/) {
	for (my $i = 0; $i <= $#row; $i++) {
	  $positiveDeltaPosition = $i if $row[$i] eq "positiveIncrease";
	  $testDeltaPosition = $i if $row[$i] eq "totalTestResultsIncrease";
	}
      }
      if (/^[0-9]/) {
	my $date = $row[0];
	my $posDelta = $row[$positiveDeltaPosition];
	my $testDelta = $row[$testDeltaPosition];
	my $pctPositive = 0;
	$pctPositive = ($posDelta / ($testDelta * 1.0)) * 100.0 if $testDelta > 0;
	#$pctPositive = nearest(0.1, $pctPositive);
	#print "$date $pctPositive% :: $posDelta / $testDelta\n";
	$dailyNewPositives{$date} = $posDelta;
	$dailyNewTests{$date} = $testDelta;
	unshift(@dailyPctPositives, $pctPositive);
      }
    }
    close(CSV);

    my $sumTests = 0;
    my $sumPositives = 0;
    my $i = 0;
    my @weeklyPctPositives;
    #foreach my $d (sort {$b <=> $a} keys %dailyNewPositives) {  # descending
    #  $sumTests += $dailyNewTests{$d};
    #  $sumPositives += $dailyNewPositives{$d};
    #  if (++$i == 7) {
    #	my $weeklyPos = 0;
    #	$weeklyPos = ($sumPositives / $sumTests) * 100;
    #	#printf("$d: weekly positives: %0.1f%%\n", $weeklyPos);
    #	unshift(@weeklyPctPositives, $weeklyPos);
    #	$i = 0;
    #  }
    #}
    #my @result = seriesToSparkLine(\@weeklyPctPositives, 2, 0);
    #my $min = $result[0];
    #my $max = $result[1];
    #my @spark = @result[2 .. $#result];
    #my $sparkline = optimizeIrcColor(join("", @spark));
#    # dubious data? FIXME
#    printf "%s weekly percent positive %s: max %s weekly; last %s weekly\n", $s, $sparkline,
#      colorByPctPos(sprintf("%0.1f%%", $max), $max),
#      colorByPctPos(sprintf("%0.1f%%", $weeklyPctPositives[$#weeklyPctPositives]), $weeklyPctPositives[$#weeklyPctPositives]);


    # daily initial vaccinations
    my $ptlvaxpct = "unknown";
    #my @last31vax = @vax[$#vax-31 .. $#vax];
    #my @last30vaxDeltas;
    #for (my $i = 1; $i <= $#last31vax; $i++) {
    #  $last30vaxDeltas[$i-1] = $last31vax[$i] - $last31vax[$i - 1];
    #  $last30vaxDeltas[$i-1] = 0 if not defined $last31vax[$i] or not defined $last31vax[$i-1];
    #}

    #my $dailyVaxMin = min(@last30vaxDeltas);
    #my $dailyVaxMax = max(@last30vaxDeltas);

    #my $sum = 0;
    #for (my $i = 6; $i >= 0; $i--) {
    #  $sum += $last30vaxDeltas[$#last30vaxDeltas-$i];
    #}
    #my $avg = round($sum / 7.0);
    #print "$sum - avg: $avg new vax/day\n";
    #my $percap = $sum / ($statePop{$s} / 100000.0);
    my $popvax = ($vax[$#vax] / $statePop{$s}) * 100.0;

    #@result = seriesToSparkLine(\@last30vaxDeltas, 0, 0);
    #$min = $result[0];
    #$max = $result[1];
    #@spark = @result[2 .. $#result];
    #printf "%s ppl newly vaxxed last 30d: %s: %s-%s daily (avg %s/day in last 7d); %s weekly newly vaxxed per 100k pop; %s of pop. partially vaxxed\n", $s, join("", @spark), commify($dailyVaxMin), commify($dailyVaxMax), commify($avg), bold(commify(sprintf("%0.1f", $percap))), bold(sprintf("%0.1f%%", $popvax));
    #printf "%s avg newly vaxxed %s/day in last 7d; %s weekly newly vaxxed per 100k pop; %s of pop. partially vaxxed\n", $s, commify($avg), bold(commify(sprintf("%0.1f", $percap))), bold(sprintf("%0.1f%%", $popvax));
    $ptlvaxpct = bold(sprintf("%0.1f%%", $popvax));

    # daily full vaccinations
    my $fulvaxpct = "unknown";
    #@last31vax = @fullVax[$#vax-31 .. $#vax];
    #@last30vaxDeltas;
    #for (my $i = 1; $i <= $#last31vax; $i++) {
    #  $last30vaxDeltas[$i-1] = $last31vax[$i] - $last31vax[$i - 1];
    #  $last30vaxDeltas[$i-1] = 0 if not defined $last31vax[$i] or not defined $last31vax[$i-1];
    #}

    #$dailyVaxMin = min(@last30vaxDeltas);
    #$dailyVaxMax = max(@last30vaxDeltas);

    #$sum = 0;
    #for (my $i = 6; $i >= 0; $i--) {
    #  $sum += $last30vaxDeltas[$#last30vaxDeltas-$i];
    #}
    #$avg = round($sum / 7.0);
    #print "$sum - avg: $avg new vax/day\n";
    #$percap = $sum / ($statePop{$s} / 100000.0);
    $popvax = ($fullVax[$#fullVax] / $statePop{$s}) * 100.0;

    #print "popvax: $popvax; fullvax: $fullVax[$#fullVax]; countrypop: $statePop{$s}\n";

    #@result = seriesToSparkLine(\@last30vaxDeltas, 0, 0);
    #$min = $result[0];
    #$max = $result[1];
    #@spark = @result[2 .. $#result];
    #printf "%s ppl fully vaxxed last 30d: %s: %s-%s daily (avg %s/day in last 7d); %s weekly fully vaxxed per 100k pop; %s of pop. fully vaxxed\n", $s, join("", @spark), commify($dailyVaxMin), commify($dailyVaxMax), commify($avg), bold(commify(sprintf("%0.1f", $percap))), bold(sprintf("%0.1f%%", $popvax));
    #printf "%s avg fully vaxxed %s/day in last 7d; %s weekly fully vaxxed per 100k pop; %s of pop. fully vaxxed\n", $s, commify($avg), bold(commify(sprintf("%0.1f", $percap))), bold(sprintf("%0.1f%%", $popvax));
    $fulvaxpct = bold(sprintf("%0.1f%%", $popvax));

    my $boostpct = "unknown";
    if ($lastBooster{$stateToName{$s}} > 0) {
      my $popboost = ($lastBooster{$stateToName{$s}} / $statePop{$s}) * 100.0;
      $boostpct = bold(sprintf("%0.1f%%", $popboost));
    }

    print("$s total pop. vaxxed: $ptlvaxpct partial, $fulvaxpct full, $boostpct boosted\n")
      if $ptlvaxpct ne "unknown" or $fulvaxpct ne "unknown" or $boostpct ne "unknown";

    #print "---\n";
  }

}

# US counties
if ($#countyList >= 0) {

  my %ctypop;
  my $ctyfile = dirname(realpath(__FILE__)) . "/2020-popestimate-us-counties.csv";
  if (not -e $ctyfile) {
    print "error: unable to find $ctyfile\n";
    exit 0;
  }
  open(CTYPOP, "<", $ctyfile);
  while (<CTYPOP>) {
    chomp;
    next if /^STNAME/;
    my ($st, $cty, undef, $est) = split /,/;
    $cty =~ s/\s*(County|City|Parish|Borough|Census Area|City and Borough|Municipality)\s*$//i unless $cty eq "New York City";
    $ctypop{lc "${st}_$cty"} = $est;
  }
  close(CTYPOP);

  my %caseTotals;
  my %deathTotals;
  my $last = 0; #debug
  my $url;
  # need to get separate URLs for last 2 years -- no longer combined
  my $curryear = strftime("%Y", gmtime time);

  for (my $y = $curryear - 1; $y <= $curryear; $y++) {
    $url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-$y.csv";
    open(HTTP, '-|', "curl --max-time 30 -s -k -L '$url'");
    while (<HTTP>) {
      my ($date,$county,$state,$fips,$cases,$deaths) = split /,/;
      $county =~ s/\s*\<(County|City|Parish|Borough|Census Area|City and Borough|Municipality)\>\s*$//i unless $county eq "New York City";
      for my $c (@countyList) {
	my ($cty, $st) = split(";", $c);
	$cty = "New York City" if lc $cty eq "new york";
	#print "$state $county :: ${st}_${cty}_${date} = $cases\n" if $county =~ m/bergen/i;
	#print "$state $county :: ${st}_${cty}_${date} = ", $cases - $last, "\n" if $county =~ m/bergen/i;
	#$last = $cases if $county =~ m/bergen/i;
	if ((lc $cty eq lc $county) and (lc $st eq lc $state)) {
	  $caseTotals{"${st}_${cty}_${date}"} = $cases;
	  $deathTotals{"${st}_${cty}_${date}"} = $deaths;
	}
      }
    }
    close(HTTP);
  }

  $url = "https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=vaccination_county_condensed_data";
  my %cty_vaxx;
  my %cty_ptl;
  my %cty_boost;
  open(HTTP, '-|', "curl --max-time 10 -s -k -L '$url'");
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $json = <HTTP>;
  close(HTTP);
  if (not $json =~ /^\s*{/) {
    print "error while retrieving data: $json\n";
    exit 0;
  }
  my $j = decode_json($json);
  if (defined $j->{vaccination_county_condensed_data}) {
    foreach my $rec (@{$j->{vaccination_county_condensed_data}}) {
      my $cty = lc $rec->{County};
      $cty =~ s/\s*(county|city|parish|area|boro)\s*$//i;
      my $st = $rec->{StateName};
      $st =~ s/\s*$//;
      my $dt = $rec->{Date};
      my $num_full_vax = $rec->{Series_Complete_Yes};
      $cty_vaxx{"${st}_${cty}"} = $num_full_vax;
      #print "$st $cty => $num_full_vax\n";
      $cty_ptl{"${st}_${cty}"} = $rec->{Administered_Dose1_Recip};
      $cty_boost{"${st}_${cty}"} = $rec->{Booster_Doses};
    }
  }

  for my $c (@countyList) {
    my ($cty, $st) = split(";", $c);
    $cty = "New York City" if lc $cty eq "new york";
    my @cases = undef;
    my @deaths = undef;

    my $n = lc "${st}_${cty}_";
    foreach my $k (sort keys %caseTotals) {
      if (rindex(lc $k, $n, 0) == 0) { # if $k startswith $n
	#print "$n: $caseTotals{$k}\n";
	push @cases, $caseTotals{$k};
	push @deaths, $deathTotals{$k};
      }
    }

    if ($#cases == 0) {
      print "$cty, $st: not found\n";
      next;
    }


    my $stAbbr;
    foreach my $n (keys %stateToName) {
      $stAbbr = $n if $stateToName{$n} eq $st;
    }
    $stAbbr = $st if not defined $stAbbr;
    #print "st: $st\n";
    #print "cty: $cty\n";

    my $pop = $ctypop{lc "${st}_$cty"};
    #print "pop: $st $cty $pop\n";

    # cases
    my $sum = 0;
    my @weeklyCasesPerCap;
    for (my $n = $#cases; $n > 0; $n--) {
      my $delta = 0;
      $delta = $cases[$n] - $cases[$n-1];
      $sum += $delta;
      #print "$sum\n";
      if ($n < $#cases and ($#cases - $n) % 7 == 6) {
	my $rate = $sum / ($pop / 100000.0);
	#print "$sum -> $rate\n";
	unshift(@weeklyCasesPerCap, $rate);   # insert at front
	$sum = 0;
      }
    }
    if ($sum > 0) {  # any leftover
      unshift(@weeklyCasesPerCap, $sum / ($pop / 100000.0)); # FIXME
      $sum = 0;
    }

    my @last52weeks = @weeklyCasesPerCap[$#weeklyCasesPerCap-52 .. $#weeklyCasesPerCap];
    my @result = seriesToSparkLine(\@last52weeks, 1, 0);
    my $min = $result[0];
    my $max = $result[1];
    my @spark = @result[2 .. $#result];
    my $sparkline = optimizeIrcColor(join("", @spark));
    printf "%s, %s cases  weekly chart: %s: max %s weekly cases per 100k pop in last 52 weeks\n", $cty, $stAbbr, $sparkline, colorByCaseRate(sprintf("%0.1f", $max), $max);

    # deaths
    my $sum = 0;
    my @weeklyDeathsPerCap;
    for (my $n = $#deaths; $n > 0; $n--) {
      my $delta = 0;
      $delta = $deaths[$n] - $deaths[$n-1];
      $sum += $delta;
      #print "$sum\n";
      if ($n < $#deaths and ($#deaths - $n) % 7 == 6) {
	my $rate = $sum / ($pop / 1000000.0);
	#print "$sum -> $rate\n";
	unshift(@weeklyDeathsPerCap, $rate);   # insert at front
	$sum = 0;
      }
    }
    if ($sum > 0) {  # any leftover
      unshift(@weeklyDeathsPerCap, $sum / ($pop / 1000000.0)); # FIXME
      $sum = 0;
    }

    my @last52weeks = @weeklyDeathsPerCap[$#weeklyDeathsPerCap-52 .. $#weeklyDeathsPerCap];
    my @result = seriesToSparkLine(\@last52weeks, 3, 0);
    my $min = $result[0];
    my $max = $result[1];
    my @spark = @result[2 .. $#result];
    my $sparkline = optimizeIrcColor(join("", @spark));
    printf "%s, %s deaths weekly chart: %s: max %s weekly deaths per 1mil pop in last 52 weeks\n", $cty, $stAbbr, $sparkline, colorByDeathRate(sprintf("%0.1f", $max), $max);


    # cases
    my @last31cases = @cases[$#cases-31 .. $#cases];
    my @last30caseDeltas;
    my @last30caseDeltasPerCap;
    for (my $i = 1; $i <= $#last31cases; $i++) {
      $last30caseDeltas[$i-1] = $last31cases[$i] - $last31cases[$i - 1];
      $last30caseDeltasPerCap[$i-1] = $last30caseDeltas[$i-1] / ($pop / 100000.0);
    }

    my $dailyCaseMin = min(@last30caseDeltas);
    my $dailyCaseMax = max(@last30caseDeltas);

    @result = seriesToSparkLine(\@last30caseDeltasPerCap, 1, 1);
    $min = $result[0];
    $max = $result[1];
    @spark = @result[2 .. $#result];
    $sparkline = optimizeIrcColor(join("", @spark));

    printf "%s, %s cases  last 30d: %s: %s-%s daily new cases", $cty, $stAbbr, $sparkline, commify($dailyCaseMin), commify($dailyCaseMax);

    my $sevenDayTotal = sum(@last30caseDeltas[$#last30caseDeltas-6 .. $#last30caseDeltas]);
    my $sevenDayPerCap = $sevenDayTotal / ($pop / 100000.0);
    printf("; %s total for last 7d (%s per 100k over 7d)\n", commify($sevenDayTotal), colorByCaseRate(sprintf("%0.1f", $sevenDayPerCap), $sevenDayPerCap));

    my $lcty = lc $cty;
    my $full_vaxxed = $cty_vaxx{"${st}_${lcty}"};
    my $unknowncty_vaxxed = $cty_vaxx{"${st}_unknown county"};


    # deaths
    my @last31deaths = @deaths[$#deaths-31 .. $#deaths];
    my @last30deathDeltas;
    my @last30deathDeltasPerCap;
    for (my $i = 1; $i <= $#last31deaths; $i++) {
      $last30deathDeltas[$i-1] = $last31deaths[$i] - $last31deaths[$i - 1];
      $last30deathDeltasPerCap[$i-1] = $last30deathDeltas[$i-1] / ($pop / 1000000.0);
    }

    my $dailyDeathMin = min(@last30deathDeltas);
    my $dailyDeathMax = max(@last30deathDeltas);

    @result = seriesToSparkLine(\@last30deathDeltasPerCap, 3, 1);
    $min = $result[0];
    $max = $result[1];
    @spark = @result[2 .. $#result];
    $sparkline = optimizeIrcColor(join("", @spark));

    printf "%s, %s deaths last 30d: %s: %s-%s daily new deaths", $cty, $stAbbr, $sparkline, commify($dailyDeathMin), commify($dailyDeathMax);

    my $sevenDayTotal = sum(@last30deathDeltas[$#last30deathDeltas-6 .. $#last30deathDeltas]);
    my $sevenDayPerCap = $sevenDayTotal / ($pop / 1000000.0);
    printf("; %s total for last 7d (%s per 1mil over 7d)\n", commify($sevenDayTotal), colorByDeathRate(sprintf("%0.1f", $sevenDayPerCap), $sevenDayPerCap));

    my $lcty = lc $cty;
    my $full_vaxxed = $cty_vaxx{"${st}_${lcty}"};
    my $ptl_vaxxed =  $cty_ptl{"${st}_${lcty}"};
    my $boost_vaxxed = $cty_boost{"${st}_${lcty}"};
    my $unknowncty_vaxxed = $cty_vaxx{"${st}_unknown county"};

    #print "$st $cty $full_vaxxed $pop\n";

    my $st_pop = undef;
    foreach my $k (keys %stateToName) {
      if ($stateToName{$k} eq $st) {
	$st_pop = $statePop{$k};
	last;
      }
    }
    #print "$unknowncty_vaxxed; $st_pop;\n";

    if (defined $full_vaxxed) {
      #printf("%s, %s: %s%% of pop. fully vaccinated", $cty, $stAbbr, bold(nearest(0.1, $full_vaxxed * 100.0 / $pop)));
      #printf(" (vax for %s%% of state pop. unallocated to a county)",
      #	nearest(0.1, $unknowncty_vaxxed * 100.0 / $st_pop)) if defined $st_pop and defined $unknowncty_vaxxed;
      #print "\n";
      printf("$cty, $stAbbr total pop. vaxxed: %s partial, %s full, %s boosted\n",
	bold(nearest(0.1,  $ptl_vaxxed * 100.0 / $pop)."%"),
	bold(nearest(0.1, $full_vaxxed * 100.0 / $pop)."%"),
	bold(nearest(0.1,$boost_vaxxed * 100.0 / $pop)."%"))
	  if (defined   $ptl_vaxxed and   $ptl_vaxxed > 0) or
	     (defined  $full_vaxxed and  $full_vaxxed > 0) or
	     (defined $boost_vaxxed and $boost_vaxxed > 0);
    }

  }
}

# world totals
if ($#interest == -1 and $#states == -1 and $#countyList == -1) {
  my $url = "https://www.worldometers.info/coronavirus/";
  my $date;
  my ($incases, $indeaths, $inrecov) = (0, 0, 0);
  my ($c, $d, $r) = (0,0,0);
  system("curl --max-time 10 -s -k '$url' > /tmp/c19-temp.html");
  open(HTTP, '-|', "elinks --dump /tmp/c19-temp.html");
  binmode(HTTP, ":utf8");
  while (<HTTP>) {
    s/^\s*//;
    s/\[\d+\]//g;

    $date = "$1z" if /Last updated: (.*) GMT/;

    $incases = 1 if /Coronavirus Cases:/;
    $c = $1 if /^\s*([0-9,]+)\s*$/ and $incases == 1;
    $c =~ s/,//g if $incases == 1;
    $incases = 0 if $c != 0;

    $indeaths = 1 if /Deaths:/;
    $d = $1 if /^\s*([0-9,]+)\s*$/ and $indeaths == 1;
    $d =~ s/,//g if $indeaths == 1;
    $indeaths = 0 if $d != 0;

    $inrecov = 1 if /Recovered:/;
    $r = $1 if /^\s*([0-9,]+)\s*$/ and $inrecov == 1;
    $r =~ s/,//g if $inrecov == 1;
    $inrecov = 0 if $r != 0;
  }
  close(HTTP);

  my $pct = sprintf("%0.1f", ($d/($d+$r)*100.0));
  print "As of $date, there are ", yellow(commify($c)), " confirmed cases and ",
    red(commify($d)), " deaths, with ", lightblue(commify($r)),
    " recovered. Death rate ", red("$pct%"), " of resolved cases.\n";
}

sub seriesToSparkLine {
  my $arrayref = shift;
  my $color = shift;
  my $daily = shift;
  my @series = @$arrayref;
  my $min = 999999999999;
  my $max = -999999999999;
  my @result;

  foreach my $e (@series) {
    $min = $e if $e < $min and $e > 0;
    $max = $e if $e > $max and $e > 0;
  }
  $max = 0 if $max == -999999999999;

  push @result, ($min, $max);

  foreach my $v (@series) {
    my $chr = valToBlock($v, $min, $max);
    $v = $v * 7.0 if $daily != 0;
    $chr = colorByCaseRate($chr, $v) if $color == 1;
    $chr = colorByPctPos($chr, $v) if $color == 2;
    $chr = colorByDeathRate($chr, $v) if $color == 3;
    push @result, $chr;
  }

  return @result;
}

# relative to min/max
sub valToBlock {
  my $v = shift;
  my $min = shift;
  my $max = shift;
  my $step = ($max - $min)/8;
  my $chr = " ";

  if ($v < $min) {
    $chr = "\xA0"; # NBSP
  } elsif ($v <= ($min + ($step * 1))) {
    $chr = "▁";
  } elsif ($v <= ($min + ($step * 2))) {
    $chr = "▂";
  } elsif ($v <= ($min + ($step * 3))) {
    $chr = "▃";
  } elsif ($v <= ($min + ($step * 4))) {
    $chr = "▄";
  } elsif ($v <= ($min + ($step * 5))) {
    $chr = "▅";
  } elsif ($v <= ($min + ($step * 6))) {
    $chr = "▆";
  } elsif ($v <= ($min + ($step * 7))) {
    $chr = "▇";
  } elsif ($v <= ($min + ($step * 8))) {
    $chr = "█";
  } else {
    $chr = "↑";
  }
  return $chr;
}

# cases per 100k population over 1 week
sub colorByCaseRate {
  my $str = shift;
  my $rate = shift;

  if ($rate < 5.0) {
    return green($str);
  } elsif ($rate < 25.0) {
    return lightgreen($str);
  } elsif ($rate < 38.0) {
    return yellow($str);
  } elsif ($rate < 50.0) {
    return darkYellow($str);
  } elsif ($rate < 100.0) {
    return darkRed($str);
  } elsif ($rate < 325.0) {
    return red($str);
  } elsif ($rate >= 325.0) {
    return magenta($str);
  }
  return $str;
}

# deaths per 1mil population over 1 week
# based on: https://ourworldindata.org/grapher/weekly-covid-deaths-per-million-people
sub colorByDeathRate {
  my $str = shift;
  my $rate = shift;

  if ($rate <= 0.0) {
    return green($str);
  } elsif ($rate < 5.0) {
    return yellow($str);
  } elsif ($rate < 10.0) {
    return darkYellow($str);
  } elsif ($rate < 50.0) {
    return darkRed($str);
  } elsif ($rate < 100.0) {
    return red($str);
  } elsif ($rate >= 100.0) {
    return magenta($str);
  }
  return $str;
}

sub colorByPctPos {
  my $str = shift;
  my $rate = shift;

  if ($rate < 0.5) {
    return green($str);
  } elsif ($rate < 1.0) {
    return lightgreen($str);
  } elsif ($rate < 3.0) {
    return yellow($str);
  } elsif ($rate < 5.0) {
    return darkYellow($str);
  } elsif ($rate < 10.0) {
    return darkRed($str);
  } else {
    return red($str);
  }
  return $str;
}
