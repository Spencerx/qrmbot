#!/usr/bin/perl
#
# US National debt, updated daily
#
# 2-clause BSD license.
# Copyright (c) 2018, 2020, 2021 molo1134@github. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Util;

use URI::Escape;
use JSON qw( decode_json );
use Math::Round;

our $scrapingant_key=undef;
my $scrapingantfile = $ENV{'HOME'} . "/.qrmbot/keys/scrapingantkey";
if (-e ($scrapingantfile)) {
  require($scrapingantfile);
}

my $url = "https://www.treasurydirect.gov/NP_WS/debt/feeds/recent";
#my $url = "https://treasurydirect.gov/NP/debt/rss";
my ($date, $public, $intra, $total);


open (HTTP, '-|', "curl -H 'Accept: application/rss+xml' --max-time 10 -L -k -s '$url'");
while (<HTTP>) {
  chomp;
  if (not $date and m|<title>Debt to the Penny for ([0-9/]+)</title>|i) {
    $date = $1;
  }
  if (m|<content:encoded>(.*)</content:encoded>|i) {
    my $tmp = decodeEntities($1),"\n";
    # <em>Debt Held by the Public:</em> 15,449,788,829,355.28<br /><em>Intragovernmental Holdings:</em> 5,690,264,848,112.51<br /><em>Total Public Debt Outstanding:</em> 21,140,053,677,467.79
    if (not $public and
	$tmp =~ m|Debt Held by the Public:</em>\s*([0-9,.]+)<|i) {

      $public = $1;
    }
    if (not $intra and
	$tmp =~ m|Intragovernmental Holdings:</em>\s*([0-9,.]+)<|i) {

      $intra = $1;
    }
    if (not $total and
	$tmp =~ m|Total Public Debt Outstanding:</em>\s*([0-9.,]+)\s*$|i) {

      $total = $1;
    }

  }
}
close HTTP;

my $url = "https://www.census.gov/popclock/data/population.php/us";
my $ua = "Mozilla/5.0 (X11; Linux x86_64; rv:140.0) Gecko/20100101 Firefox/140.0";

#if (defined $scrapingant_key) {
#  $url = "https://api.scrapingant.com/v2/general?url=". uri_escape($url) . "&x-api-key=${scrapingant_key}&browser=false";
#}

local $/;   # read entire file -- FIXME: potentially memory hungry
open (JSON, '-|', "curl-impersonate-chrome -4 --compressed --max-time 10 -A '$ua' -s -k -L '$url'");
my $json = <JSON>;
close(JSON);
my $j;

if ($json =~ /Sorry, you have been blocked/) {
  goto SKIP_POP_PARSE;
}

if (length($json) > 0) {
  $j = decode_json($json) or die "parse error: $json\n";
}

if (defined $j->{detail}) {
  print "error: $j->{detail}\n";
  exit 0;
}

SKIP_POP_PARSE:

my $pop;
$pop = $j->{us}->{population} if defined $j->{us}->{population};

my $numtotal = $total;
$numtotal =~ s/,//g;

my $avg_household_size = 2.52; # TODO would like to get a data source
my $percap;
my $avg_hh_debt;
$percap = nearest(0.01, $numtotal / $pop) if defined $pop;
$avg_hh_debt = nearest(0.01, $percap * $avg_household_size) if defined $pop;

#print "$date $total $public $intra\n";
print "As of $date, the total federal public US debt is USD\$ $total"
  if defined $date and defined $total;
printf "; per-capita debt is \$%s; debt per average household is \$%s", commify($percap), commify($avg_hh_debt)
  if defined $percap;
print "\n";

